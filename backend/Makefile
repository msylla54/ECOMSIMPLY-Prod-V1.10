# Makefile pour le backend ECOMSIMPLY
.PHONY: help install test lint format typecheck cov clean ci dev

# Configuration
PYTHON := python3
PIP := pip3
RUFF := ruff
MYPY := mypy
PYTEST := pytest

help: ## Afficher l'aide
	@echo "Commandes disponibles:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-12s\033[0m %s\n", $$1, $$2}'

install: ## Installer les d√©pendances
	$(PIP) install -r requirements.txt

test: ## Ex√©cuter les tests
	$(PYTEST) tests/test_basic.py tests/test_health.py -q

test-verbose: ## Ex√©cuter les tests en mode verbeux
	$(PYTEST) tests/test_basic.py tests/test_health.py -v

test-coverage: ## Ex√©cuter les tests avec coverage
	$(PYTEST) tests/test_basic.py tests/test_health.py --cov=. --cov-report=term-missing

test-html: ## G√©n√©rer le rapport de coverage HTML
	$(PYTEST) tests/test_basic.py tests/test_health.py --cov=. --cov-report=html
	@echo "Rapport disponible dans htmlcov/index.html"

lint: ## V√©rifier le code avec ruff
	$(RUFF) check .

lint-fix: ## Corriger automatiquement les erreurs ruff
	$(RUFF) check . --fix

format: ## Formater le code avec ruff
	$(RUFF) format .

format-check: ## V√©rifier le formatage sans modifier
	$(RUFF) format . --check

typecheck: ## V√©rifier les types avec mypy
	$(MYPY) .

quality: lint typecheck ## V√©rifier la qualit√© du code (lint + types)

ci: ## Pipeline CI compl√®te
	@echo "üöÄ D√©marrage du pipeline CI..."
	@echo "üì¶ Installation des d√©pendances..."
	$(MAKE) install
	@echo "üé® V√©rification du formatage..."
	$(RUFF) format . --check
	@echo "üîç Analyse du code..."
	$(RUFF) check .
	@echo "üîé V√©rification des types..."
	$(MYPY) .
	@echo "üß™ Ex√©cution des tests..."
	$(PYTEST) tests/test_basic.py tests/test_health.py --maxfail=1 --disable-warnings --cov=.
	@echo "‚úÖ Pipeline CI termin√©e avec succ√®s!"

ci-fast: ## Pipeline CI rapide (sans coverage)
	@echo "üöÄ Pipeline CI rapide..."
	$(RUFF) format . --check
	$(RUFF) check .
	$(MYPY) .
	$(PYTEST) tests/test_basic.py tests/test_health.py --maxfail=1 --disable-warnings -x
	@echo "‚úÖ Pipeline CI rapide termin√©e!"

cov: ## Afficher le coverage actuel
	$(PYTEST) tests/test_basic.py tests/test_health.py --cov=. --cov-report=term-missing:skip-covered

clean: ## Nettoyer les fichiers temporaires
	@echo "üßπ Nettoyage..."
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf .pytest_cache
	rm -rf htmlcov
	rm -rf .coverage
	rm -rf coverage.xml
	rm -rf .mypy_cache
	rm -rf .ruff_cache
	@echo "‚úÖ Nettoyage termin√©!"

dev: ## Lancer le serveur de d√©veloppement
	uvicorn server:app --reload --host 0.0.0.0 --port 8001

dev-debug: ## Lancer le serveur avec debug
	uvicorn server:app --reload --host 0.0.0.0 --port 8001 --log-level debug

# Tests par cat√©gorie
test-unit: ## Ex√©cuter seulement les tests unitaires
	$(PYTEST) -m "unit" -q

test-integration: ## Ex√©cuter seulement les tests d'int√©gration
	$(PYTEST) -m "integration" -q

test-api: ## Ex√©cuter seulement les tests d'API
	$(PYTEST) -m "api" -q

# D√©veloppement
watch-test: ## Surveiller les fichiers et relancer les tests
	$(PYTEST) --looponfail

fix: ## Corriger automatiquement le code (format + lint)
	$(RUFF) format .
	$(RUFF) check . --fix

check: ## V√©rification compl√®te sans modification
	$(RUFF) format . --check
	$(RUFF) check .
	$(MYPY) .

# Rapports
report: ## G√©n√©rer tous les rapports
	$(PYTEST) tests/test_basic.py tests/test_health.py --cov=. --cov-report=html --cov-report=xml
	@echo "üìä Rapports g√©n√©r√©s:"
	@echo "  - Coverage HTML: htmlcov/index.html"
	@echo "  - Coverage XML: coverage.xml"