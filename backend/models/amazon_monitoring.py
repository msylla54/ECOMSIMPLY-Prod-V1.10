"""
Amazon Monitoring Models - Phase 5
Models for monitoring, optimization history and KPI tracking
"""
from datetime import datetime
from typing import Optional, Dict, Any, List
from pydantic import BaseModel, Field
from enum import Enum
import uuid


class MonitoringStatus(str, Enum):
    """Statut du monitoring"""
    ACTIVE = "active"
    PAUSED = "paused"
    ERROR = "error"
    MAINTENANCE = "maintenance"


class OptimizationAction(str, Enum):
    """Type d'action d'optimisation"""
    SEO_UPDATE = "seo_update"
    PRICE_UPDATE = "price_update" 
    CONTENT_UPDATE = "content_update"
    CATALOG_UPDATE = "catalog_update"
    AUTO_CORRECTION = "auto_correction"


class OptimizationStatus(str, Enum):
    """Statut d'une optimisation"""
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"
    REVERTED = "reverted"


class BuyBoxStatus(str, Enum):
    """Statut Buy Box d√©taill√©"""
    WON = "won"          # ‚úÖ Nous avons la Buy Box
    LOST = "lost"        # ‚ùå Buy Box perdue  
    SHARED = "shared"    # üîÑ Buy Box partag√©e
    ELIGIBLE = "eligible" # ‚è≥ √âligible mais pas gagnante
    NOT_ELIGIBLE = "not_eligible"  # ‚ùå Non √©ligible
    UNKNOWN = "unknown"   # ‚ùì √âtat ind√©termin√©


class MarketplaceConfig(BaseModel):
    """Configuration par marketplace"""
    marketplace_id: str = Field(..., description="ID marketplace Amazon")
    country_code: str = Field(..., description="Code pays (FR, UK, US, DE, etc.)")
    currency: str = Field(..., description="Devise (EUR, GBP, USD, etc.)")
    domain: str = Field(..., description="Domaine Amazon (amazon.fr, amazon.co.uk, etc.)")
    enabled: bool = Field(default=True, description="Monitoring activ√© pour ce marketplace")
    monitoring_frequency_hours: int = Field(default=6, description="Fr√©quence monitoring en heures")


class MonitoringJob(BaseModel):
    """Job de monitoring schedul√©"""
    
    # Identifiants
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    user_id: str = Field(..., description="ID utilisateur")
    marketplace_id: str = Field(..., description="ID marketplace")
    
    # Configuration
    skus: List[str] = Field(..., description="Liste des SKUs √† monitorer")
    monitoring_enabled: bool = Field(default=True, description="Monitoring actif")
    auto_optimization_enabled: bool = Field(default=True, description="Auto-optimisation activ√©e")
    
    # Fr√©quences
    monitoring_frequency_hours: int = Field(default=6, description="Fr√©quence monitoring")
    optimization_frequency_hours: int = Field(default=24, description="Fr√©quence optimisation")
    
    # Seuils d'alerte
    buybox_loss_threshold: float = Field(default=0.8, description="Seuil alerte perte Buy Box")
    price_deviation_threshold: float = Field(default=0.05, description="Seuil √©cart prix %")
    seo_score_threshold: float = Field(default=0.7, description="Seuil score SEO")
    
    # √âtat
    status: MonitoringStatus = Field(default=MonitoringStatus.ACTIVE)
    last_run_at: Optional[datetime] = Field(None, description="Derni√®re ex√©cution")
    next_run_at: Optional[datetime] = Field(None, description="Prochaine ex√©cution")
    run_count: int = Field(default=0, description="Nombre d'ex√©cutions")
    
    # M√©tadonn√©es
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)


class ProductSnapshot(BaseModel):
    """Snapshot des donn√©es produit √† un moment donn√©"""
    
    # Identifiants
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    job_id: str = Field(..., description="ID du job de monitoring")
    user_id: str
    sku: str
    asin: Optional[str] = None
    marketplace_id: str
    
    # Donn√©es Catalog API
    title: Optional[str] = None
    description: Optional[str] = None
    bullet_points: List[str] = Field(default_factory=list)
    keywords: List[str] = Field(default_factory=list)
    main_image_url: Optional[str] = None
    images: List[str] = Field(default_factory=list)
    category: Optional[str] = None
    brand: Optional[str] = None
    
    # Donn√©es Pricing API
    current_price: Optional[float] = None
    currency: Optional[str] = None
    list_price: Optional[float] = None
    sale_price: Optional[float] = None
    
    # Buy Box Data
    buybox_price: Optional[float] = None
    buybox_winner: Optional[str] = None
    buybox_status: BuyBoxStatus = Field(default=BuyBoxStatus.UNKNOWN)
    buybox_eligibility: bool = Field(default=False)
    
    # Concurrents
    competitors_count: int = Field(default=0)
    min_competitor_price: Optional[float] = None
    avg_competitor_price: Optional[float] = None
    
    # M√©triques Performance (si Brand Owner)
    impressions: Optional[int] = None
    clicks: Optional[int] = None
    ctr_percent: Optional[float] = None
    conversions: Optional[int] = None
    conversion_rate_percent: Optional[float] = None
    
    # √âtats de publication
    listing_status: Optional[str] = None  # ACTIVE, INACTIVE, INCOMPLETE, etc.
    fulfillment_channel: Optional[str] = None  # FBA, FBM
    quantity_available: Optional[int] = None
    
    # M√©ta
    snapshot_at: datetime = Field(default_factory=datetime.utcnow)
    api_call_duration_ms: int = Field(default=0)
    data_completeness_score: float = Field(default=0.0, ge=0, le=1.0)


class DesiredState(BaseModel):
    """√âtat d√©sir√© pour un produit (d√©fini par les r√®gles utilisateur)"""
    
    # Identifiants
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    user_id: str
    sku: str
    marketplace_id: str
    
    # SEO d√©sir√©
    desired_title: Optional[str] = None
    desired_description: Optional[str] = None
    desired_bullet_points: List[str] = Field(default_factory=list)
    desired_keywords: List[str] = Field(default_factory=list)
    
    # Pricing d√©sir√©
    desired_price: Optional[float] = None
    price_strategy: Optional[str] = None  # De PricingRule
    min_price: Optional[float] = None
    max_price: Optional[float] = None
    
    # Objectifs Business
    target_buybox_share: float = Field(default=0.9, description="Objectif Buy Box share")
    target_conversion_rate: Optional[float] = None
    target_ctr: Optional[float] = None
    
    # Configuration
    auto_correction_enabled: bool = Field(default=True)
    correction_max_frequency_hours: int = Field(default=24)
    
    # M√©tadonn√©es
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)


class OptimizationDecision(BaseModel):
    """D√©cision d'optimisation prise par le syst√®me"""
    
    # Identifiants
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    job_id: str
    user_id: str
    sku: str
    marketplace_id: str
    
    # Contexte de la d√©cision
    current_snapshot_id: str = Field(description="Snapshot ayant d√©clench√© l'optimisation")
    desired_state_id: str = Field(description="√âtat d√©sir√© de r√©f√©rence")
    
    # Type de d√©cision
    action_type: OptimizationAction
    priority: int = Field(default=5, ge=1, le=10, description="Priorit√© 1=urgent, 10=low")
    
    # Changements identifi√©s
    detected_changes: Dict[str, Any] = Field(default_factory=dict)
    recommended_changes: Dict[str, Any] = Field(default_factory=dict)
    
    # Justification
    reasoning: str = Field(description="Explication de la d√©cision")
    confidence_score: float = Field(ge=0, le=1, description="Confiance dans la d√©cision")
    risk_score: float = Field(ge=0, le=1, description="Score de risque")
    
    # Ex√©cution
    status: OptimizationStatus = Field(default=OptimizationStatus.PENDING)
    execution_plan: Dict[str, Any] = Field(default_factory=dict)
    sp_api_calls: List[Dict[str, Any]] = Field(default_factory=list)
    
    # R√©sultats
    execution_started_at: Optional[datetime] = None
    execution_completed_at: Optional[datetime] = None
    execution_duration_ms: Optional[int] = None
    sp_api_responses: List[Dict[str, Any]] = Field(default_factory=list)
    success: Optional[bool] = None
    error_message: Optional[str] = None
    
    # Metrics
    created_at: datetime = Field(default_factory=datetime.utcnow)


class MonitoringKPIs(BaseModel):
    """KPIs de monitoring agr√©g√©s"""
    
    # P√©riode
    period_start: datetime
    period_end: datetime
    marketplace_id: str
    user_id: str
    
    # M√©triques g√©n√©rales
    total_skus_monitored: int = 0
    active_listings: int = 0
    inactive_listings: int = 0
    
    # Buy Box
    buybox_won_count: int = 0
    buybox_lost_count: int = 0
    buybox_share_avg: float = 0.0
    buybox_share_change: float = 0.0
    
    # Pricing
    price_updates_count: int = 0
    price_optimizations_successful: int = 0
    price_optimizations_failed: int = 0
    avg_price_change_percent: float = 0.0
    
    # SEO
    seo_updates_count: int = 0
    seo_optimizations_successful: int = 0
    seo_optimizations_failed: int = 0
    avg_seo_score: float = 0.0
    
    # Performance (si disponible)
    total_impressions: Optional[int] = None
    total_clicks: Optional[int] = None
    avg_ctr_percent: Optional[float] = None
    total_conversions: Optional[int] = None
    avg_conversion_rate_percent: Optional[float] = None
    
    # Auto-corrections
    auto_corrections_triggered: int = 0
    auto_corrections_successful: int = 0
    auto_corrections_failed: int = 0
    
    # Sant√© syst√®me
    monitoring_jobs_successful: int = 0
    monitoring_jobs_failed: int = 0
    api_calls_count: int = 0
    api_errors_count: int = 0
    avg_api_response_time_ms: float = 0.0
    
    # M√©tadonn√©es
    calculated_at: datetime = Field(default_factory=datetime.utcnow)


class MonitoringAlert(BaseModel):
    """Alerte de monitoring"""
    
    # Identifiants
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    job_id: str
    user_id: str
    sku: str
    marketplace_id: str
    
    # Type d'alerte
    alert_type: str = Field(..., description="buybox_lost, price_drift, seo_degraded, etc.")
    severity: str = Field(..., description="critical, warning, info")
    
    # D√©tails
    title: str = Field(..., description="Titre de l'alerte")
    description: str = Field(..., description="Description d√©taill√©e")
    current_value: Optional[float] = None
    threshold_value: Optional[float] = None
    
    # Actions
    auto_correction_attempted: bool = Field(default=False)
    auto_correction_successful: Optional[bool] = None
    manual_action_required: bool = Field(default=False)
    
    # √âtat
    status: str = Field(default="active", description="active, acknowledged, resolved")
    resolved_at: Optional[datetime] = None
    resolved_by: Optional[str] = None
    
    # M√©tadonn√©es
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)


# Mod√®les de r√©ponse API
class MonitoringJobResponse(BaseModel):
    """R√©ponse API pour job de monitoring"""
    success: bool
    job: Optional[MonitoringJob] = None
    message: str
    errors: List[str] = Field(default_factory=list)


class MonitoringKPIResponse(BaseModel):
    """R√©ponse API pour KPIs"""
    success: bool
    kpis: Optional[MonitoringKPIs] = None
    message: str


class OptimizationHistoryResponse(BaseModel):
    """R√©ponse API pour historique optimisations"""
    success: bool
    decisions: List[OptimizationDecision]
    total_count: int
    page: int
    per_page: int
    message: str


class MonitoringDashboardData(BaseModel):
    """Donn√©es compl√®tes pour dashboard monitoring"""
    kpis: MonitoringKPIs
    recent_snapshots: List[ProductSnapshot]
    recent_optimizations: List[OptimizationDecision] 
    active_alerts: List[MonitoringAlert]
    jobs_status: List[MonitoringJob]