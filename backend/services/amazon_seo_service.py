# Amazon SEO Service - Optimisation pour algorithme A9/A10 d'Amazon
import re
import logging
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class AmazonSEOValidation:
    """R√©sultat de validation SEO Amazon"""
    is_valid: bool
    score: float
    issues: List[str]
    recommendations: List[str]
    optimized_content: Optional[Dict[str, Any]] = None

class AmazonSEORules:
    """
    Service d'optimisation SEO pour Amazon selon les r√®gles A9/A10
    
    R√®gles Amazon SP-API:
    - Titre: ‚â§ 200 caract√®res, mots-cl√©s strat√©giques, pas de promo
    - Bullet Points: 5 points, b√©n√©fices clairs, mots-cl√©s vari√©s
    - Description: riche, lisible, HTML minimal autoris√©
    - Backend Keywords: ‚â§ 250 bytes, pas de doublons, pas de marques concurrentes
    - Images: principale ‚â• 1000px, fond blanc obligatoire
    """
    
    # Configuration SEO Amazon
    MAX_TITLE_LENGTH = 200
    REQUIRED_BULLET_POINTS = 5
    MAX_BULLET_LENGTH = 255
    MAX_BACKEND_KEYWORDS_BYTES = 250
    MIN_IMAGE_SIZE = 1000
    
    # Mots interdits Amazon
    FORBIDDEN_WORDS = {
        'best', 'meilleur', 'top', 'num√©ro 1', '#1', 'nouveau', 'new',
        'livraison gratuite', 'free shipping', 'promo', 'solde', 'r√©duction',
        'offre sp√©ciale', 'limited time', 'exclusive', 'garanti', 'guarantee'
    }
    
    # Marques concurrentes interdites
    COMPETITOR_BRANDS = {
        'apple', 'samsung', 'nike', 'adidas', 'sony', 'lg', 'canon', 'nikon'
    }
    
    def __init__(self):
        """Initialise le service SEO Amazon"""
        logger.info("‚úÖ Amazon SEO Service initialized")
    
    def optimize_title(self, product_data: Dict[str, Any]) -> Tuple[str, List[str]]:
        """
        Optimise le titre selon les r√®gles Amazon A9/A10
        
        Format optimal: [Marque] [Mod√®le] [Caract√©ristique Cl√©] [Taille/Capacit√©] [Couleur]
        
        Args:
            product_data: Donn√©es produit √† optimiser
            
        Returns:
            Tuple (titre_optimis√©, recommandations)
        """
        try:
            recommendations = []
            
            # R√©cup√©ration des donn√©es
            brand = product_data.get('brand', '').strip()
            product_name = product_data.get('product_name', '').strip()
            key_features = product_data.get('key_features', [])
            category = product_data.get('category', '').strip()
            
            # Construction du titre optimis√©
            title_parts = []
            
            # 1. Marque (si disponible)
            if brand:
                title_parts.append(brand)
            else:
                recommendations.append("Ajoutez une marque pour am√©liorer la visibilit√©")
            
            # 2. Nom du produit principal
            if product_name:
                # Nettoyer le nom (supprimer mots interdits)
                cleaned_name = self._clean_forbidden_words(product_name)
                title_parts.append(cleaned_name)
            
            # 3. Caract√©ristiques cl√©s (les 2 plus importantes)
            if key_features:
                key_features_str = ' '.join(key_features[:2])
                cleaned_features = self._clean_forbidden_words(key_features_str)
                if cleaned_features:
                    title_parts.append(cleaned_features)
            
            # 4. Cat√©gorie (si pertinente)
            if category and category.lower() not in product_name.lower():
                title_parts.append(category)
            
            # Construction finale
            optimized_title = ' '.join(title_parts)
            
            # Validation longueur
            if len(optimized_title) > self.MAX_TITLE_LENGTH:
                # Truncate intelligemment
                optimized_title = optimized_title[:self.MAX_TITLE_LENGTH-3] + '...'
                recommendations.append(f"Titre tronqu√© √† {self.MAX_TITLE_LENGTH} caract√®res")
            
            # Validation mots-cl√©s
            if len(optimized_title.split()) < 3:
                recommendations.append("Ajoutez plus de mots-cl√©s descriptifs")
            
            # Validation caract√®res sp√©ciaux
            if any(char in optimized_title for char in ['‚Ñ¢', '¬Æ', '¬©']):
                recommendations.append("√âvitez les symboles ‚Ñ¢, ¬Æ, ¬© dans le titre")
            
            logger.info(f"üî§ Titre Amazon optimis√©: {len(optimized_title)} caract√®res")
            return optimized_title, recommendations
            
        except Exception as e:
            logger.error(f"‚ùå Erreur optimisation titre Amazon: {e}")
            return product_data.get('product_name', 'Produit'), ["Erreur d'optimisation"]
    
    def generate_bullet_points(self, product_data: Dict[str, Any]) -> Tuple[List[str], List[str]]:
        """
        G√©n√®re 5 bullet points optimis√©s pour Amazon
        
        Structure optimale par bullet:
        - Point 1: B√©n√©fice principal + mot-cl√© primaire
        - Point 2: Caract√©ristiques techniques + mots-cl√©s secondaires  
        - Point 3: Usage/application + mots-cl√©s de niche
        - Point 4: Qualit√©/durabilit√© + mots-cl√©s √©motionnels
        - Point 5: Compatibilit√©/dimensions + mots-cl√©s techniques
        
        Args:
            product_data: Donn√©es produit
            
        Returns:
            Tuple (bullet_points, recommandations)
        """
        try:
            recommendations = []
            bullet_points = []
            
            description = product_data.get('description', '')
            features = product_data.get('key_features', [])
            benefits = product_data.get('benefits', [])
            specifications = product_data.get('specifications', {})
            
            # Template pour diff√©rents types de produits
            templates = self._get_bullet_templates(product_data.get('category', ''))
            
            # Bullet Point 1: B√©n√©fice principal
            if benefits:
                bullet1 = f"‚úì AVANTAGE PRINCIPAL: {benefits[0]}"
                bullet_points.append(self._optimize_bullet_point(bullet1))
            elif description:
                primary_benefit = description[:100] + "..." if len(description) > 100 else description
                bullet1 = f"‚úì {primary_benefit}"
                bullet_points.append(self._optimize_bullet_point(bullet1))
            
            # Bullet Point 2: Caract√©ristiques techniques
            if features:
                tech_features = ' | '.join(features[:3])
                bullet2 = f"üìã CARACT√âRISTIQUES: {tech_features}"
                bullet_points.append(self._optimize_bullet_point(bullet2))
            
            # Bullet Point 3: Usage et applications
            usage_bullet = self._generate_usage_bullet(product_data)
            if usage_bullet:
                bullet_points.append(usage_bullet)
            
            # Bullet Point 4: Qualit√© et durabilit√©
            quality_bullet = self._generate_quality_bullet(product_data)
            if quality_bullet:
                bullet_points.append(quality_bullet)
            
            # Bullet Point 5: Sp√©cifications et compatibilit√©
            if specifications:
                spec_items = list(specifications.items())[:2]
                spec_text = ' | '.join([f"{k}: {v}" for k, v in spec_items])
                bullet5 = f"‚öôÔ∏è SP√âCIFICATIONS: {spec_text}"
                bullet_points.append(self._optimize_bullet_point(bullet5))
            
            # Compl√©ter avec des bullets g√©n√©riques si n√©cessaire
            while len(bullet_points) < self.REQUIRED_BULLET_POINTS:
                generic_bullet = self._generate_generic_bullet(len(bullet_points) + 1, product_data)
                bullet_points.append(generic_bullet)
            
            # Validation finale
            for i, bullet in enumerate(bullet_points):
                if len(bullet) > self.MAX_BULLET_LENGTH:
                    bullet_points[i] = bullet[:self.MAX_BULLET_LENGTH-3] + '...'
                    recommendations.append(f"Bullet point {i+1} tronqu√©")
            
            logger.info(f"üîπ {len(bullet_points)} bullet points Amazon g√©n√©r√©s")
            return bullet_points[:self.REQUIRED_BULLET_POINTS], recommendations
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration bullet points: {e}")
            return self._get_fallback_bullets(product_data), ["Erreur de g√©n√©ration"]
    
    def optimize_description(self, product_data: Dict[str, Any]) -> Tuple[str, List[str]]:
        """
        Optimise la description produit pour Amazon A+
        
        Structure optimale:
        - Paragraphe d'accroche avec mots-cl√©s primaires
        - Section avantages avec √©mojis
        - Section techniques avec sp√©cifications
        - Section usage et compatibilit√©
        - Call-to-action subtil
        
        Args:
            product_data: Donn√©es produit
            
        Returns:
            Tuple (description_optimis√©e, recommandations)
        """
        try:
            recommendations = []
            sections = []
            
            product_name = product_data.get('product_name', 'Ce produit')
            description = product_data.get('description', '')
            features = product_data.get('key_features', [])
            benefits = product_data.get('benefits', [])
            
            # Section 1: Accroche avec mots-cl√©s
            hook_section = f"""
<h3>üåü D√©couvrez {product_name}</h3>
<p>{description[:200]}{"..." if len(description) > 200 else ""}</p>
"""
            sections.append(hook_section)
            
            # Section 2: Avantages principaux
            if benefits:
                benefits_section = "<h4>‚úÖ Avantages Cl√©s</h4>\n<ul>\n"
                for benefit in benefits[:4]:
                    benefits_section += f"<li>{benefit}</li>\n"
                benefits_section += "</ul>\n"
                sections.append(benefits_section)
            
            # Section 3: Caract√©ristiques techniques
            if features:
                features_section = "<h4>‚öôÔ∏è Caract√©ristiques</h4>\n<ul>\n"
                for feature in features[:5]:
                    features_section += f"<li>{feature}</li>\n"
                features_section += "</ul>\n"
                sections.append(features_section)
            
            # Section 4: Usage et applications
            usage_section = f"""
<h4>üéØ Utilisation</h4>
<p>Parfait pour un usage quotidien, {product_name} s'adapte √† tous vos besoins. 
Que ce soit pour un usage professionnel ou personnel, ce produit vous accompagne 
avec fiabilit√© et performance.</p>
"""
            sections.append(usage_section)
            
            # Assemblage final
            optimized_description = '\n'.join(sections)
            
            # Nettoyage HTML (Amazon accepte un HTML limit√©)
            optimized_description = self._clean_html_for_amazon(optimized_description)
            
            # Validation longueur (Amazon recommande 1000-2000 caract√®res)
            char_count = len(optimized_description)
            if char_count < 500:
                recommendations.append("Description courte - ajoutez plus de d√©tails")
            elif char_count > 2000:
                recommendations.append("Description longue - condensez le contenu")
            
            logger.info(f"üìù Description Amazon optimis√©e: {char_count} caract√®res")
            return optimized_description, recommendations
            
        except Exception as e:
            logger.error(f"‚ùå Erreur optimisation description: {e}")
            return description, ["Erreur d'optimisation"]
    
    def generate_backend_keywords(self, product_data: Dict[str, Any]) -> Tuple[str, List[str]]:
        """
        G√©n√®re les mots-cl√©s backend Amazon (Search Terms)
        
        R√®gles critiques:
        - Maximum 250 bytes total
        - Pas de doublons
        - Pas de marques concurrentes
        - Pas de termes du titre/bullets
        - S√©par√©s par des espaces (pas de virgules)
        - Inclure synonymes et variantes
        
        Args:
            product_data: Donn√©es produit
            
        Returns:
            Tuple (keywords_string, recommandations)
        """
        try:
            recommendations = []
            keywords = set()
            
            # Collecte des mots-cl√©s de base
            product_name = product_data.get('product_name', '').lower()
            category = product_data.get('category', '').lower()
            description = product_data.get('description', '').lower()
            features = [f.lower() for f in product_data.get('key_features', [])]
            
            # Extraction des mots-cl√©s du titre existant (pour √©viter doublons)
            existing_title_words = set(re.findall(r'\w+', product_name))
            
            # G√©n√©ration de synonymes et variantes
            category_synonyms = self._get_category_synonyms(category)
            keywords.update(category_synonyms)
            
            # Mots-cl√©s de caract√©ristiques
            for feature in features:
                feature_words = re.findall(r'\w+', feature)
                for word in feature_words:
                    if len(word) > 3 and word not in existing_title_words:
                        keywords.add(word)
            
            # Mots-cl√©s d'usage
            usage_keywords = self._generate_usage_keywords(product_data)
            keywords.update(usage_keywords)
            
            # Mots-cl√©s √©motionnels/b√©n√©fices
            benefit_keywords = self._generate_benefit_keywords(product_data)
            keywords.update(benefit_keywords)
            
            # Nettoyage et filtrage
            filtered_keywords = set()
            for keyword in keywords:
                # Supprimer mots interdits
                if not any(forbidden in keyword.lower() for forbidden in self.FORBIDDEN_WORDS):
                    # Supprimer marques concurrentes
                    if not any(brand in keyword.lower() for brand in self.COMPETITOR_BRANDS):
                        # Supprimer mots trop courts
                        if len(keyword) > 2:
                            filtered_keywords.add(keyword)
            
            # Construction de la cha√Æne finale
            keywords_list = list(filtered_keywords)
            keywords_string = ' '.join(keywords_list)
            
            # Validation taille (250 bytes max)
            keywords_bytes = len(keywords_string.encode('utf-8'))
            if keywords_bytes > self.MAX_BACKEND_KEYWORDS_BYTES:
                # Tronquer intelligemment
                truncated_keywords = []
                current_bytes = 0
                
                for keyword in keywords_list:
                    keyword_bytes = len(keyword.encode('utf-8')) + 1  # +1 pour l'espace
                    if current_bytes + keyword_bytes <= self.MAX_BACKEND_KEYWORDS_BYTES:
                        truncated_keywords.append(keyword)
                        current_bytes += keyword_bytes
                    else:
                        break
                
                keywords_string = ' '.join(truncated_keywords)
                recommendations.append(f"Mots-cl√©s tronqu√©s pour respecter la limite de {self.MAX_BACKEND_KEYWORDS_BYTES} bytes")
            
            logger.info(f"üîç {len(filtered_keywords)} mots-cl√©s backend g√©n√©r√©s ({keywords_bytes} bytes)")
            return keywords_string, recommendations
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration mots-cl√©s backend: {e}")
            return "", ["Erreur de g√©n√©ration"]
    
    def validate_listing(self, listing_data: Dict[str, Any]) -> AmazonSEOValidation:
        """
        Validation compl√®te d'une liste Amazon selon les r√®gles SEO A9/A10
        
        Args:
            listing_data: Donn√©es de la liste Amazon
            
        Returns:
            AmazonSEOValidation avec score et recommandations
        """
        try:
            issues = []
            recommendations = []
            score_components = []
            
            title = listing_data.get('title', '')
            bullet_points = listing_data.get('bullet_points', [])
            description = listing_data.get('description', '')
            backend_keywords = listing_data.get('backend_keywords', '')
            images = listing_data.get('images', [])
            
            # Validation du titre (25 points)
            title_score = self._validate_title(title, issues, recommendations)
            score_components.append(title_score * 0.25)
            
            # Validation des bullet points (30 points)
            bullets_score = self._validate_bullet_points(bullet_points, issues, recommendations)
            score_components.append(bullets_score * 0.30)
            
            # Validation de la description (20 points)
            desc_score = self._validate_description(description, issues, recommendations)
            score_components.append(desc_score * 0.20)
            
            # Validation des mots-cl√©s backend (15 points)
            keywords_score = self._validate_backend_keywords(backend_keywords, issues, recommendations)
            score_components.append(keywords_score * 0.15)
            
            # Validation des images (10 points)
            images_score = self._validate_images(images, issues, recommendations)
            score_components.append(images_score * 0.10)
            
            # Score final
            total_score = sum(score_components)
            is_valid = total_score >= 0.7  # 70% minimum pour validation
            
            logger.info(f"üìä Validation Amazon SEO: {total_score:.2f}/1.0 ({len(issues)} issues)")
            
            return AmazonSEOValidation(
                is_valid=is_valid,
                score=total_score,
                issues=issues,
                recommendations=recommendations
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erreur validation listing Amazon: {e}")
            return AmazonSEOValidation(
                is_valid=False,
                score=0.0,
                issues=["Erreur de validation"],
                recommendations=["Contactez le support"]
            )
    
    # M√©thodes utilitaires priv√©es
    
    def _clean_forbidden_words(self, text: str) -> str:
        """Supprime les mots interdits par Amazon"""
        for word in self.FORBIDDEN_WORDS:
            text = re.sub(rf'\b{re.escape(word)}\b', '', text, flags=re.IGNORECASE)
        return ' '.join(text.split())  # Nettoie les espaces multiples
    
    def _get_bullet_templates(self, category: str) -> Dict[str, str]:
        """Retourne des templates de bullets selon la cat√©gorie"""
        templates = {
            'electronique': {
                'template1': '‚ö° PERFORMANCE: {feature} - Technologie avanc√©e pour {benefit}',
                'template2': 'üîß COMPATIBILIT√â: Compatible avec {compatibility} - {usage}',
                'template3': 'üõ°Ô∏è QUALIT√â: Certification {cert} - Garantie {warranty}',
            },
            'mode': {
                'template1': 'üëï STYLE: {design} - Parfait pour {occasion}',
                'template2': 'üßµ MATI√àRE: {material} - Confort et durabilit√©',
                'template3': 'üìè TAILLE: Taille {size} - Coupe {fit}',
            },
            'default': {
                'template1': '‚ú® AVANTAGE: {feature} pour {benefit}',
                'template2': 'üéØ USAGE: Id√©al pour {usage}',
                'template3': 'üèÜ QUALIT√â: {quality_aspect}',
            }
        }
        return templates.get(category, templates['default'])
    
    def _optimize_bullet_point(self, bullet: str) -> str:
        """Optimise un bullet point individuel"""
        # Nettoyer les mots interdits
        cleaned = self._clean_forbidden_words(bullet)
        
        # S'assurer qu'il commence par un √©moji ou symbole
        if not re.match(r'^[‚úì‚úÖüîπ‚ö°üéØüèÜüìã‚öôÔ∏èüõ°Ô∏è]', cleaned):
            cleaned = f"‚úì {cleaned}"
        
        return cleaned[:self.MAX_BULLET_LENGTH]
    
    def _generate_usage_bullet(self, product_data: Dict[str, Any]) -> str:
        """G√©n√®re un bullet point d'usage"""
        category = product_data.get('category', '')
        usage_templates = {
            'electronique': 'üéØ USAGE: Parfait pour gaming, travail et divertissement quotidien',
            'mode': 'üëó OCCASION: Id√©al pour travail, sorties et √©v√©nements sp√©ciaux',
            'maison': 'üè† UTILISATION: Am√©liore votre confort quotidien et d√©coration',
            'default': 'üéØ APPLICATION: Polyvalent pour tous vos besoins quotidiens'
        }
        return usage_templates.get(category, usage_templates['default'])
    
    def _generate_quality_bullet(self, product_data: Dict[str, Any]) -> str:
        """G√©n√®re un bullet point de qualit√©"""
        return "üèÜ QUALIT√â PREMIUM: Mat√©riaux durables et finition soign√©e pour une long√©vit√© optimale"
    
    def _generate_generic_bullet(self, index: int, product_data: Dict[str, Any]) -> str:
        """G√©n√®re un bullet g√©n√©rique selon l'index"""
        generics = [
            "‚ú® INNOVATION: Design moderne et fonctionnalit√©s avanc√©es",
            "üîí FIABILIT√â: Test√© et approuv√© pour une utilisation intensive",
            "üéÅ SATISFACTION: Garantie satisfaction client - Support technique inclus",
            "üåü EXCELLENCE: Produit de qualit√© sup√©rieure aux normes strictes",
            "üíé PREMIUM: Finition haut de gamme et attention aux d√©tails"
        ]
        return generics[index % len(generics)]
    
    def _get_fallback_bullets(self, product_data: Dict[str, Any]) -> List[str]:
        """Bullets de secours en cas d'erreur"""
        product_name = product_data.get('product_name', 'Ce produit')
        return [
            f"‚úì QUALIT√â: {product_name} de haute qualit√©",
            f"‚úì PERFORMANCE: Con√ßu pour vos besoins quotidiens",
            f"‚úì DURABILIT√â: Mat√©riaux r√©sistants et durables",
            f"‚úì FACILIT√â: Simple d'utilisation et d'entretien",
            f"‚úì GARANTIE: Satisfaction client garantie"
        ]
    
    def _clean_html_for_amazon(self, html: str) -> str:
        """Nettoie le HTML pour Amazon (tags autoris√©s seulement)"""
        allowed_tags = ['p', 'br', 'strong', 'b', 'em', 'i', 'ul', 'ol', 'li', 'h3', 'h4']
        # Impl√©mentation simplifi√©e - en production, utiliser BeautifulSoup
        return html
    
    def _get_category_synonyms(self, category: str) -> set:
        """Retourne des synonymes pour une cat√©gorie"""
        synonyms_map = {
            'electronique': {'tech', 'num√©rique', 'digital', 'gadget', 'appareil'},
            'mode': {'v√™tement', 'style', 'fashion', 'tendance', 'look'},
            'maison': {'d√©coration', 'int√©rieur', 'habitat', 'domicile', 'foyer'},
        }
        return synonyms_map.get(category, set())
    
    def _generate_usage_keywords(self, product_data: Dict[str, Any]) -> set:
        """G√©n√®re des mots-cl√©s d'usage"""
        return {'quotidien', 'pratique', 'utile', 'efficace', 'polyvalent'}
    
    def _generate_benefit_keywords(self, product_data: Dict[str, Any]) -> set:
        """G√©n√®re des mots-cl√©s de b√©n√©fices optimis√©s"""
        base_keywords = {'confort', 'performance', 'qualit√©', 'durabilit√©', 'fiabilit√©'}
        
        # Ajouter des mots-cl√©s sp√©cifiques selon la cat√©gorie
        category = product_data.get('category', '').lower()
        if 'electronique' in category:
            base_keywords.update({'technologie', 'innovation', 'connectivit√©'})
        elif 'mode' in category:
            base_keywords.update({'style', 'tendance', '√©l√©gance'})
        
        return base_keywords
    
    def _validate_title(self, title: str, issues: List[str], recommendations: List[str]) -> float:
        """Valide le titre et retourne un score 0-1"""
        score = 1.0
        
        if not title:
            issues.append("Titre manquant")
            return 0.0
        
        if len(title) > self.MAX_TITLE_LENGTH:
            issues.append(f"Titre trop long ({len(title)}/{self.MAX_TITLE_LENGTH} caract√®res)")
            score -= 0.3
        
        if len(title) < 50:
            recommendations.append("Titre court - ajoutez plus de mots-cl√©s")
            score -= 0.1
        
        # V√©rifier mots interdits
        forbidden_found = [word for word in self.FORBIDDEN_WORDS if word.lower() in title.lower()]
        if forbidden_found:
            issues.append(f"Mots interdits trouv√©s: {', '.join(forbidden_found)}")
            score -= 0.4
        
        return max(score, 0.0)
    
    def _validate_bullet_points(self, bullets: List[str], issues: List[str], recommendations: List[str]) -> float:
        """Valide les bullet points et retourne un score 0-1"""
        if len(bullets) != self.REQUIRED_BULLET_POINTS:
            issues.append(f"{len(bullets)}/5 bullet points (5 requis)")
            return 0.0
        
        score = 1.0
        for i, bullet in enumerate(bullets):
            if len(bullet) > self.MAX_BULLET_LENGTH:
                issues.append(f"Bullet {i+1} trop long")
                score -= 0.1
            
            if len(bullet) < 20:
                recommendations.append(f"Bullet {i+1} trop court")
                score -= 0.05
        
        return max(score, 0.0)
    
    def _validate_description(self, description: str, issues: List[str], recommendations: List[str]) -> float:
        """Valide la description et retourne un score 0-1"""
        score = 1.0
        
        if not description:
            issues.append("Description manquante")
            return 0.0
        
        if len(description) < 500:
            recommendations.append("Description courte - ajoutez plus de d√©tails")
            score -= 0.2
        
        if len(description) > 2000:
            recommendations.append("Description longue - condensez")
            score -= 0.1
        
        return max(score, 0.0)
    
    def _validate_backend_keywords(self, keywords: str, issues: List[str], recommendations: List[str]) -> float:
        """Valide les mots-cl√©s backend et retourne un score 0-1"""
        score = 1.0
        
        if not keywords:
            issues.append("Mots-cl√©s backend manquants")
            return 0.0
        
        keywords_bytes = len(keywords.encode('utf-8'))
        if keywords_bytes > self.MAX_BACKEND_KEYWORDS_BYTES:
            issues.append(f"Mots-cl√©s trop longs ({keywords_bytes}/{self.MAX_BACKEND_KEYWORDS_BYTES} bytes)")
            score -= 0.3
        
        return max(score, 0.0)
    
    def _validate_images(self, images: List[Dict], issues: List[str], recommendations: List[str]) -> float:
        """Valide les images et retourne un score 0-1"""
        score = 1.0
        
        if not images:
            issues.append("Aucune image fournie")
            return 0.0
        
        # V√©rifier image principale
        main_image = images[0] if images else None
        if main_image:
            width = main_image.get('width', 0)
            height = main_image.get('height', 0)
            
            if width < self.MIN_IMAGE_SIZE or height < self.MIN_IMAGE_SIZE:
                issues.append(f"Image principale trop petite ({width}x{height}, minimum {self.MIN_IMAGE_SIZE}px)")
                score -= 0.5
        
        return max(score, 0.0)