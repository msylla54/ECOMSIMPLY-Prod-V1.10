"""
QA Testing Service - ECOMSIMPLY
‚úÖ PHASE 6 - Mode QA avec test de r√©silience et simulation d'erreurs
"""

import os
import random
import time
import json
from datetime import datetime
from typing import Dict, Optional, List
import logging
from pathlib import Path

# Import du logging structur√©
from .logging_service import ecomsimply_logger, log_error, log_info, log_operation

class QATestingService:
    """Service pour les tests QA avec simulation d'erreurs de r√©silience"""
    
    def __init__(self):
        # ‚úÖ PHASE 6: Configuration du mode TEST
        self.test_mode = os.environ.get('TEST_MODE', 'False').lower() == 'true'
        self.failure_rate = 0.1  # 1 g√©n√©ration sur 10 (10%)
        self.generation_counter = 0
        
        # Configuration du logger sp√©cialis√© pour les tests
        self.qa_logger = self._setup_qa_logger()
        
    def _setup_qa_logger(self):
        """Configuration du logger sp√©cialis√© generation_test.log"""
        
        qa_logger = logging.getLogger("qa_testing")
        qa_logger.setLevel(logging.INFO)
        
        # √âviter les handlers multiples
        if qa_logger.handlers:
            qa_logger.handlers.clear()
        
        # Formatter pour les logs QA
        formatter = logging.Formatter(
            '%(asctime)s | %(levelname)s | %(message)s'
        )
        
        try:
            # Cr√©er le dossier logs si n√©cessaire
            log_dir = Path("/app/logs")
            log_dir.mkdir(exist_ok=True)
            
            # Handler fichier generation_test.log
            file_handler = logging.FileHandler("/app/logs/generation_test.log")
            file_handler.setLevel(logging.INFO)
            file_handler.setFormatter(formatter)
            qa_logger.addHandler(file_handler)
            
        except Exception as e:
            # Fallback vers handler console si impossible d'√©crire fichier
            console_handler = logging.StreamHandler()
            console_handler.setLevel(logging.INFO)
            console_handler.setFormatter(formatter)
            qa_logger.addHandler(console_handler)
        
        return qa_logger
    
    def should_simulate_failure(self, user_id: Optional[str] = None, product_name: Optional[str] = None) -> Dict:
        """
        ‚úÖ PHASE 6: D√©termine si on doit simuler un √©chec pour cette g√©n√©ration
        Retourne: {"simulate": bool, "failure_type": str, "reason": str}
        """
        
        if not self.test_mode:
            return {"simulate": False, "failure_type": None, "reason": "TEST_MODE d√©sactiv√©"}
        
        self.generation_counter += 1
        
        # 1 g√©n√©ration sur 10 simule un √©chec
        should_fail = (self.generation_counter % 10 == 0) or (random.random() < self.failure_rate)
        
        if not should_fail:
            return {"simulate": False, "failure_type": None, "reason": f"G√©n√©ration #{self.generation_counter} - Pas d'√©chec simul√©"}
        
        # Types d'√©checs possibles √† simuler
        failure_types = [
            "gpt_service_failure",     # √âchec GPT-4 et GPT-3.5
            "image_generation_failure", # √âchec FAL.ai
            "seo_scraping_failure",    # √âchec scraping SEO et prix
            "database_failure"         # √âchec sauvegarde base
        ]
        
        failure_type = random.choice(failure_types)
        
        log_info(
            f"MODE QA: Simulation d'√©chec activ√©e",
            user_id=user_id,
            product_name=product_name,
            service="QATestingService",
            operation="simulate_failure",
            generation_counter=self.generation_counter,
            failure_type=failure_type,
            test_mode=self.test_mode
        )
        
        # Log sp√©cialis√© dans generation_test.log
        self.qa_logger.info(f"SIMULATION ACTIV√âE | G√©n√©ration #{self.generation_counter} | Type: {failure_type} | Produit: {product_name} | User: {user_id}")
        
        return {
            "simulate": True,
            "failure_type": failure_type,
            "reason": f"G√©n√©ration #{self.generation_counter} - √âchec simul√© ({failure_type})"
        }
    
    def log_test_result(
        self,
        user_id: str,
        product_name: str,
        simulation_info: Dict,
        fallback_triggered: bool,
        final_success: bool,
        error_details: Optional[str] = None,
        fallback_details: Optional[str] = None,
        generation_time: Optional[float] = None
    ):
        """
        ‚úÖ PHASE 6: Log du r√©sultat de test dans generation_test.log
        """
        
        test_result = {
            "timestamp": datetime.utcnow().isoformat(),
            "user_id": user_id,
            "product_name": product_name,
            "generation_counter": self.generation_counter,
            "simulation_activated": simulation_info.get("simulate", False),
            "error_simulated": simulation_info.get("failure_type"),
            "fallback_triggered": fallback_triggered,
            "final_success": final_success,
            "generation_time_seconds": generation_time,
            "error_details": error_details,
            "fallback_details": fallback_details
        }
        
        # Log structur√© principal
        log_operation(
            "QATestingService",
            "test_result",
            "success" if final_success else "failure",
            **test_result
        )
        
        # Log sp√©cialis√© generation_test.log avec format lisible
        status = "‚úÖ SUCC√àS" if final_success else "‚ùå √âCHEC"
        fallback_status = "üîÑ ACTIV√â" if fallback_triggered else "‚ûñ NON REQUIS"
        simulation_status = f"‚ö†Ô∏è SIMUL√â ({simulation_info.get('failure_type', 'N/A')})" if simulation_info.get("simulate") else "üîß NORMAL"
        
        self.qa_logger.info(
            f"R√âSULTAT TEST | {status} | "
            f"G√©n√©ration #{self.generation_counter} | "
            f"Produit: {product_name[:30]}... | "
            f"Simulation: {simulation_status} | "
            f"Fallback: {fallback_status} | "
            f"Temps: {generation_time:.2f}s" if generation_time else "Temps: N/A"
        )
        
        # Si √©chec simul√©, ajouter d√©tails
        if simulation_info.get("simulate"):
            self.qa_logger.info(
                f"D√âTAILS SIMULATION | "
                f"Type erreur: {simulation_info.get('failure_type')} | "
                f"Fallback d√©clench√©: {'OUI' if fallback_triggered else 'NON'} | "
                f"R√©cup√©ration: {'R√âUSSIE' if final_success else '√âCHOU√âE'}"
            )
            
            if error_details:
                self.qa_logger.info(f"ERREUR SIMUL√âE | {error_details}")
            
            if fallback_details:
                self.qa_logger.info(f"FALLBACK UTILIS√â | {fallback_details}")
    
    def create_simulated_exception(self, failure_type: str, context: str = "") -> Exception:
        """
        ‚úÖ PHASE 6: Cr√©e une exception simul√©e pour les tests
        """
        
        error_messages = {
            "gpt_service_failure": f"TEST QA: Simulation √©chec GPT service {context}",
            "image_generation_failure": f"TEST QA: Simulation √©chec g√©n√©ration images {context}",
            "seo_scraping_failure": f"TEST QA: Simulation √©chec scraping SEO {context}",
            "database_failure": f"TEST QA: Simulation √©chec base de donn√©es {context}"
        }
        
        message = error_messages.get(failure_type, f"TEST QA: √âchec simul√© {failure_type} {context}")
        
        return Exception(message)
    
    def get_qa_statistics(self) -> Dict:
        """Retourne les statistiques du mode QA"""
        
        return {
            "test_mode_active": self.test_mode,
            "total_generations": self.generation_counter,
            "failure_rate_configured": self.failure_rate,
            "next_forced_failure": 10 - (self.generation_counter % 10),
            "qa_log_path": "/app/logs/generation_test.log"
        }

# Instance globale du service QA
qa_service = QATestingService()