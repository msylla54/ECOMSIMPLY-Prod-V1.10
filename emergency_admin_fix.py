#!/usr/bin/env python3
"""
Script d'urgence pour cr√©er l'admin et tester l'authentification
"""
import requests
import time
import sys

PRODUCTION_URL = "https://ecomsimply.com"
ADMIN_EMAIL = "msylla54@gmail.com"
ADMIN_PASSWORD = "ECS-Temp#2025-08-22!"

def emergency_create_admin():
    """Utilise l'endpoint d'urgence pour cr√©er l'admin"""
    try:
        print("üö® Cr√©ation admin via endpoint d'urgence...")
        response = requests.post(f"{PRODUCTION_URL}/api/emergency/create-admin", timeout=20)
        print(f"Emergency admin creation: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Response: {data}")
            return data.get("ok", False)
        else:
            print(f"‚ùå Emergency creation failed: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Emergency creation error: {e}")
        return False

def test_admin_login():
    """Test login admin"""
    try:
        print("üîê Test login admin...")
        login_data = {
            "email": ADMIN_EMAIL,
            "password": ADMIN_PASSWORD
        }
        response = requests.post(f"{PRODUCTION_URL}/api/auth/login", json=login_data, timeout=15)
        print(f"Login test: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get("ok") and data.get("token"):
                print(f"‚úÖ LOGIN SUCCESS! Token: {data['token'][:50]}...")
                print(f"User: {data.get('user', {})}")
                return data.get("token")
        
        print(f"‚ùå Login failed: {response.text}")
        return None
        
    except Exception as e:
        print(f"‚ùå Login error: {e}")
        return None

def test_dashboard_access(token):
    """Test acc√®s dashboard avec token"""
    try:
        print("üè† Test acc√®s dashboard...")
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        # Test d'un endpoint qui n√©cessite l'authentification
        response = requests.get(f"{PRODUCTION_URL}/api/health", headers=headers, timeout=10)
        print(f"Authenticated request: {response.status_code}")
        
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå Dashboard access error: {e}")
        return False

def main():
    print("üö® EMERGENCY ADMIN FIX - PRODUCTION")
    print("=" * 60)
    
    # Attendre le d√©ploiement
    print("‚è≥ Attente d√©ploiement endpoint d'urgence...")
    time.sleep(60)
    
    # √âtape 1: Cr√©er admin via endpoint d'urgence
    print("\n1. Cr√©ation admin via endpoint d'urgence:")
    admin_created = emergency_create_admin()
    
    # √âtape 2: Test login
    print("\n2. Test authentification admin:")
    token = test_admin_login()
    
    # √âtape 3: Test acc√®s avec token
    if token:
        print("\n3. Test acc√®s authentifi√©:")
        dashboard_ok = test_dashboard_access(token)
        
        if dashboard_ok:
            print("\nüéâ MISSION R√âUSSIE!")
            print("‚úÖ Admin cr√©√© en production")
            print("‚úÖ Authentification fonctionnelle")
            print("‚úÖ Acc√®s dashboard OK")
            print(f"‚úÖ Email: {ADMIN_EMAIL}")
            print(f"‚úÖ Token g√©n√©r√©: {len(token)} caract√®res")
            return True
    
    print("\n‚ùå √âchec de la mission d'urgence")
    print("üí° V√©rifier les logs Vercel pour plus de d√©tails")
    return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)