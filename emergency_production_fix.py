#!/usr/bin/env python3
"""
Script d'urgence pour cr√©er l'admin directement via MongoDB Atlas
"""
import sys
import bcrypt
import pymongo
from pymongo import MongoClient
from datetime import datetime
import os

def generate_admin_hash(password):
    """Generate bcrypt hash for admin password"""
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

def create_admin_direct_mongo():
    """Create admin directly in MongoDB Atlas if possible"""
    try:
        # Cette approche n√©cessiterait la connection string MongoDB Atlas
        # Mais nous n'avons pas acc√®s direct √† la DB de production
        print("‚ùå Acc√®s direct MongoDB Atlas non disponible dans cet environnement")
        return False
    except Exception as e:
        print(f"‚ùå Erreur MongoDB direct: {e}")
        return False

def test_alternative_endpoints():
    """Test diff√©rents endpoints pour contourner le probl√®me"""
    import requests
    
    PRODUCTION_URL = "https://ecomsimply.com"
    
    # Test 1: Essayer avec diff√©rents tokens
    tokens_to_try = [
        "ECS-Bootstrap-2025-Secure-Token",
        "ecomsimply-bootstrap-token",
        "bootstrap-admin-2025"
    ]
    
    for token in tokens_to_try:
        try:
            print(f"üîÑ Test bootstrap avec token: {token[:20]}...")
            headers = {
                "x-bootstrap-token": token,
                "Content-Type": "application/json"
            }
            
            response = requests.post(f"{PRODUCTION_URL}/api/admin/bootstrap", 
                                   headers=headers, timeout=10)
            
            print(f"   Status: {response.status_code}")
            if response.status_code == 200:
                print(f"   ‚úÖ SUCC√àS! R√©ponse: {response.json()}")
                return True
            else:
                print(f"   Response: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
    
    # Test 2: V√©rifier si l'admin existe d√©j√† avec diff√©rents mots de passe
    passwords_to_try = [
        "ECS-Permanent#2025!",
        "ECS-Temp#2025-08-22!",
        "admin123",
        "ecomsimply2025"
    ]
    
    for password in passwords_to_try:
        try:
            print(f"üîÑ Test login avec password: {password[:10]}...")
            login_data = {
                "email": "msylla54@gmail.com",
                "password": password
            }
            
            response = requests.post(f"{PRODUCTION_URL}/api/auth/login", 
                                   json=login_data, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get("ok") and data.get("token"):
                    print(f"   ‚úÖ LOGIN R√âUSSI! Token: {data['token'][:50]}...")
                    return True, data["token"]
            else:
                print(f"   Status: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
    
    return False

def create_manual_bootstrap_request():
    """Create a manual bootstrap request with detailed debugging"""
    import requests
    
    PRODUCTION_URL = "https://ecomsimply.com"
    
    print("üîß DIAGNOSTIC APPROFONDI BOOTSTRAP:")
    
    # Test avec le hash g√©n√©r√© localement
    admin_password = "ECS-Permanent#2025!"
    admin_hash = generate_admin_hash(admin_password)
    
    print(f"Password: {admin_password}")
    print(f"Generated hash: {admin_hash}")
    print(f"Expected hash: $2b$12$yQhOn3ydalPB3RuDZNsD8uUbfuc.MVG3Pf30xrUougEsibvP4Ukty")
    
    # Test de v√©rification du hash
    test_valid = bcrypt.checkpw(admin_password.encode('utf-8'), admin_hash.encode('utf-8'))
    print(f"Hash validation test: {test_valid}")
    
    # Essayer diff√©rentes approches
    headers = {
        "x-bootstrap-token": "ECS-Bootstrap-2025-Secure-Token",
        "Content-Type": "application/json",
        "User-Agent": "EcomsimplyAdmin/1.0"
    }
    
    try:
        response = requests.post(f"{PRODUCTION_URL}/api/admin/bootstrap", 
                               headers=headers, timeout=15)
        
        print(f"Bootstrap response: {response.status_code}")
        print(f"Response headers: {dict(response.headers)}")
        print(f"Response body: {response.text}")
        
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå Bootstrap error: {e}")
        return False

def main():
    print("üö® DIAGNOSTIC ET FIX ADMIN PRODUCTION")
    print("=" * 60)
    
    # Test 1: Alternative endpoints
    print("\n1. üîÑ Test endpoints alternatifs:")
    success = test_alternative_endpoints()
    
    if success:
        print("\n‚úÖ ADMIN TROUV√â ET FONCTIONNEL!")
        return True
    
    # Test 2: Bootstrap diagnostic
    print("\n2. üîß Diagnostic bootstrap approfondi:")
    bootstrap_success = create_manual_bootstrap_request()
    
    if bootstrap_success:
        print("\n‚úÖ BOOTSTRAP R√âUSSI!")
        return True
    
    # Test 3: MongoDB direct (si possible)
    print("\n3. üóÑÔ∏è Tentative acc√®s MongoDB direct:")
    mongo_success = create_admin_direct_mongo()
    
    if mongo_success:
        print("\n‚úÖ ADMIN CR√â√â VIA MONGODB!")
        return True
    
    print("\n‚ùå TOUS LES TESTS √âCHOU√âS")
    print("üí° Recommandations:")
    print("1. V√©rifier que les variables Vercel sont bien configur√©es")
    print("2. V√©rifier que le red√©ploiement Vercel est complet")
    print("3. Attendre quelques minutes et relancer")
    print("4. V√©rifier les logs Vercel pour erreurs de d√©ploiement")
    
    return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)