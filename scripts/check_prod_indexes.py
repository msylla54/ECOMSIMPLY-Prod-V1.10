#!/usr/bin/env python3
"""
V√©rification des index en production
"""

import asyncio
from motor.motor_asyncio import AsyncIOMotorClient

async def check_production_indexes():
    try:
        prod_url = "mongodb+srv://ecomsimply-app:xIP7EfOXhODZdp0k@ecomsimply.xagju9s.mongodb.net/ecomsimply_production"
        client = AsyncIOMotorClient(prod_url)
        db = client["ecomsimply_production"]
        
        print("üîç === V√âRIFICATION INDEX PRODUCTION ===")
        
        # V√©rifier index users (critique pour auth)
        if "users" in await db.list_collection_names():
            print("\nüìã Collection 'users' :")
            users_collection = db["users"]
            
            async for index in users_collection.list_indexes():
                index_name = index.get("name", "unknown")
                index_key = index.get("key", {})
                is_unique = index.get("unique", False)
                
                print(f"  - {index_name}: {index_key} {'(UNIQUE)' if is_unique else ''}")
                
                # V√©rifier index email unique
                if "email" in index_key and is_unique:
                    print("    ‚úÖ Index email unique d√©tect√©")
        
        # Test insertion duplicate pour valider contrainte unique
        print("\nüß™ Test contrainte unique email :")
        try:
            test_user = {
                "email": "test-duplicate@example.com",
                "name": "Test Duplicate"
            }
            
            # Ins√©rer une premi√®re fois
            await db.users.insert_one(test_user.copy())
            print("  ‚úÖ Premier insert r√©ussi")
            
            # Essayer d'ins√©rer le m√™me email (doit √©chouer)
            try:
                await db.users.insert_one(test_user.copy())
                print("  ‚ùå ERREUR: Duplicate autoris√© (index unique manquant)")
            except Exception as e:
                if "duplicate" in str(e).lower():
                    print("  ‚úÖ Contrainte unique fonctionnelle")
                else:
                    print(f"  ‚ö†Ô∏è Erreur inattendue : {e}")
            
            # Nettoyer le test
            await db.users.delete_many({"email": "test-duplicate@example.com"})
            print("  üßπ Donn√©es de test nettoy√©es")
            
        except Exception as e:
            print(f"  ‚ùå Erreur test contrainte : {e}")
        
        client.close()
        print("\n‚úÖ V√©rification index termin√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification index : {e}")

if __name__ == "__main__":
    asyncio.run(check_production_indexes())