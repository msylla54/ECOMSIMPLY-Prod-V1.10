#!/bin/bash

# =====================================
# SCRIPT DE BASCULE BASE DE DONN√âES
# ecomsimply_production ‚Üí ecomsimply_production
# =====================================

set -e

BACKEND_URL="https://ecomsimply-deploy.preview.emergentagent.com"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="artifacts/db_switch_${TIMESTAMP}.log"

# Cr√©er le r√©pertoire de logs
mkdir -p artifacts

echo "üîÑ === MIGRATION BASE DE DONN√âES ECOMSIMPLY ===" | tee -a "$LOG_FILE"
echo "Timestamp: $(date)" | tee -a "$LOG_FILE"
echo "Backend: $BACKEND_URL" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

# =====================================
# PHASE 1: V√âRIFICATION PR√â-MIGRATION
# =====================================
echo "üìã PHASE 1: V√©rification pr√©-migration" | tee -a "$LOG_FILE"

echo "  üîç Test sant√© API actuelle..." | tee -a "$LOG_FILE"
HEALTH_BEFORE=$(curl -s "$BACKEND_URL/api/health" | jq -r '.database // "unknown"')
echo "  üìä Base actuelle: $HEALTH_BEFORE" | tee -a "$LOG_FILE"

if [ "$HEALTH_BEFORE" != "ecomsimply_production" ]; then
    echo "  ‚ö†Ô∏è  ATTENTION: Base actuelle n'est pas 'ecomsimply_production' mais '$HEALTH_BEFORE'" | tee -a "$LOG_FILE"
    echo "  Continuer quand m√™me ? (y/N)"
    read -r CONFIRM
    if [ "$CONFIRM" != "y" ] && [ "$CONFIRM" != "Y" ]; then
        echo "  ‚ùå Migration annul√©e par l'utilisateur" | tee -a "$LOG_FILE"
        exit 1
    fi
fi

echo "" | tee -a "$LOG_FILE"

# =====================================
# PHASE 2: ACTIVATION MODE LECTURE SEULE
# =====================================
echo "üìã PHASE 2: Activation mode lecture seule" | tee -a "$LOG_FILE"
echo "  üîí NOTE: Cette √©tape n√©cessite de configurer READ_ONLY_MODE=true dans emergent.sh" | tee -a "$LOG_FILE"
echo "  ‚è±Ô∏è  Temps estim√© fen√™tre maintenance: < 2 minutes" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

echo "  Appuyez sur ENTR√âE quand READ_ONLY_MODE=true est configur√© dans emergent.sh..."
read -r

# V√©rifier que le mode lecture seule est actif
echo "  üß™ Test mode lecture seule..." | tee -a "$LOG_FILE"
READONLY_TEST=$(curl -s -X POST "$BACKEND_URL/api/auth/register" \
    -H "Content-Type: application/json" \
    -d '{"name":"test","email":"test@example.com","password":"test"}' \
    -w "%{http_code}")

HTTP_CODE="${READONLY_TEST: -3}"
if [ "$HTTP_CODE" = "503" ]; then
    echo "  ‚úÖ Mode lecture seule actif (503 Service Unavailable)" | tee -a "$LOG_FILE"
else
    echo "  ‚ö†Ô∏è  Mode lecture seule non d√©tect√© (HTTP $HTTP_CODE)" | tee -a "$LOG_FILE"
    echo "  Continuer quand m√™me ? (y/N)"
    read -r CONFIRM
    if [ "$CONFIRM" != "y" ] && [ "$CONFIRM" != "Y" ]; then
        echo "  ‚ùå Migration annul√©e - mode lecture seule requis" | tee -a "$LOG_FILE"
        exit 1
    fi
fi

echo "" | tee -a "$LOG_FILE"

# =====================================
# PHASE 3: BASCULE DB_NAME
# =====================================
echo "üìã PHASE 3: Bascule DB_NAME" | tee -a "$LOG_FILE"
echo "  üìù Variables √† configurer dans emergent.sh:" | tee -a "$LOG_FILE"
echo "     DB_NAME=ecomsimply_production" | tee -a "$LOG_FILE"
echo "     MONGO_URL=mongodb+srv://ecomsimply-app:xIP7EfOXhODZdp0k@ecomsimply.xagju9s.mongodb.net/ecomsimply_production?retryWrites=true&w=majority&appName=EcomSimply" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

echo "  Appuyez sur ENTR√âE quand DB_NAME=ecomsimply_production est configur√© et l'app red√©ploy√©e..."
read -r

# =====================================
# PHASE 4: VALIDATION POST-MIGRATION
# =====================================
echo "üìã PHASE 4: Validation post-migration" | tee -a "$LOG_FILE"

echo "  üîç Test sant√© API apr√®s migration..." | tee -a "$LOG_FILE"
sleep 5  # Attendre stabilisation

HEALTH_AFTER=""
for i in {1..10}; do
    HEALTH_AFTER=$(curl -s "$BACKEND_URL/api/health" 2>/dev/null | jq -r '.database // "error"' 2>/dev/null || echo "error")
    if [ "$HEALTH_AFTER" = "ecomsimply_production" ]; then
        break
    fi
    echo "  ‚è≥ Tentative $i/10 - Attente stabilisation..." | tee -a "$LOG_FILE"
    sleep 3
done

if [ "$HEALTH_AFTER" = "ecomsimply_production" ]; then
    echo "  ‚úÖ Migration r√©ussie: Base = $HEALTH_AFTER" | tee -a "$LOG_FILE"
else
    echo "  ‚ùå √âCHEC migration: Base = $HEALTH_AFTER" | tee -a "$LOG_FILE"
    echo "" | tee -a "$LOG_FILE"
    echo "üî¥ PROC√âDURE DE ROLLBACK N√âCESSAIRE:" | tee -a "$LOG_FILE"
    echo "  1. Configurer DB_NAME=ecomsimply_production dans emergent.sh" | tee -a "$LOG_FILE"
    echo "  2. Red√©ployer l'application" | tee -a "$LOG_FILE"
    echo "  3. V√©rifier /api/health" | tee -a "$LOG_FILE"
    exit 1
fi

echo "" | tee -a "$LOG_FILE"

# =====================================
# PHASE 5: D√âSACTIVATION LECTURE SEULE
# =====================================
echo "üìã PHASE 5: D√©sactivation mode lecture seule" | tee -a "$LOG_FILE"
echo "  üîì Configurer READ_ONLY_MODE=false (ou supprimer) dans emergent.sh" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

echo "  Appuyez sur ENTR√âE quand READ_ONLY_MODE=false est configur√©..."
read -r

# Test fonctionnel final
echo "  üß™ Test √©criture apr√®s migration..." | tee -a "$LOG_FILE"
TEST_EMAIL="migration-test-$(date +%s)@example.com"
WRITE_TEST=$(curl -s -X POST "$BACKEND_URL/api/auth/register" \
    -H "Content-Type: application/json" \
    -d "{\"name\":\"Migration Test\",\"email\":\"$TEST_EMAIL\",\"password\":\"testpassword123\"}" \
    -w "%{http_code}")

WRITE_HTTP_CODE="${WRITE_TEST: -3}"
if [ "$WRITE_HTTP_CODE" = "200" ] || [ "$WRITE_HTTP_CODE" = "201" ]; then
    echo "  ‚úÖ Test √©criture r√©ussi (HTTP $WRITE_HTTP_CODE)" | tee -a "$LOG_FILE"
    
    # Nettoyer le compte de test
    echo "  üßπ Nettoyage compte de test..." | tee -a "$LOG_FILE"
    
elif [ "$WRITE_HTTP_CODE" = "409" ]; then
    echo "  ‚úÖ Test √©criture: compte existe d√©j√† (HTTP 409) - index unique OK" | tee -a "$LOG_FILE"
else
    echo "  ‚ö†Ô∏è  Test √©criture: HTTP $WRITE_HTTP_CODE - √† v√©rifier manuellement" | tee -a "$LOG_FILE"
fi

echo "" | tee -a "$LOG_FILE"

# =====================================
# R√âSUM√â FINAL
# =====================================
echo "üéâ === MIGRATION TERMIN√âE ===" | tee -a "$LOG_FILE"
echo "üìä R√©sum√©:" | tee -a "$LOG_FILE"
echo "  ‚Ä¢ Base avant: $HEALTH_BEFORE" | tee -a "$LOG_FILE"
echo "  ‚Ä¢ Base apr√®s: $HEALTH_AFTER" | tee -a "$LOG_FILE"
echo "  ‚Ä¢ Status: ‚úÖ SUCC√àS" | tee -a "$LOG_FILE"
echo "  ‚Ä¢ Log complet: $LOG_FILE" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

echo "üìã Prochaines √©tapes:" | tee -a "$LOG_FILE"
echo "  1. V√©rifier fonctionnalit√©s critiques de l'application" | tee -a "$LOG_FILE"
echo "  2. Surveiller les logs pour d√©tecter d'√©ventuelles erreurs" | tee -a "$LOG_FILE"
echo "  3. Documenter la migration dans DEPLOY_DB_SWITCH.md" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

echo "‚úÖ Migration r√©ussie ! Consultez $LOG_FILE pour les d√©tails." | tee -a "$LOG_FILE"