#!/usr/bin/env python3
"""
Test complet du tableau de bord admin ECOMSIMPLY avec les corrections apport√©es
Tests: Admin Plans Config, Admin Promotions, Admin Testimonials
Corrections test√©es: Cl√©s admin 2025, suppression d√©pendance get_current_user, timeouts/fallbacks
"""

import asyncio
import sys
import os
import time
import json
import requests
from typing import Dict, Any, List
from datetime import datetime

# Configuration des URLs
BACKEND_URL = "https://ecomsimply.com"
API_BASE = f"{BACKEND_URL}/api"

# Cl√©s admin pour les tests
CORRECT_ADMIN_KEY = "ECOMSIMPLY_ADMIN_2025"
WRONG_ADMIN_KEY = "ECOMSIMPLY_ADMIN_2024"  # Ancienne cl√© qui ne doit plus marcher

print("üîß ECOMSIMPLY ADMIN DASHBOARD - TEST COMPLET DES CORRECTIONS")
print("=" * 80)
print(f"üåê Backend URL: {BACKEND_URL}")
print(f"üîë Admin Key (correct): {CORRECT_ADMIN_KEY}")
print(f"‚ùå Admin Key (wrong): {WRONG_ADMIN_KEY}")
print("=" * 80)

class AdminDashboardTester:
    """Testeur complet du tableau de bord admin"""
    
    def __init__(self):
        self.test_results = {
            'plans_config': {'passed': 0, 'failed': 0, 'details': []},
            'promotions': {'passed': 0, 'failed': 0, 'details': []},
            'testimonials': {'passed': 0, 'failed': 0, 'details': []},
            'security': {'passed': 0, 'failed': 0, 'details': []}
        }
        self.session = requests.Session()
        self.session.timeout = 30  # Timeout global
        
    def log_test(self, category: str, test_name: str, success: bool, details: str = ""):
        """Log un r√©sultat de test"""
        if success:
            self.test_results[category]['passed'] += 1
            status = "‚úÖ PASS"
        else:
            self.test_results[category]['failed'] += 1
            status = "‚ùå FAIL"
        
        self.test_results[category]['details'].append({
            'test': test_name,
            'status': status,
            'details': details
        })
        
        print(f"{status}: {test_name}")
        if details:
            print(f"    üìã {details}")
    
    def test_plans_config_endpoint(self):
        """Test de l'endpoint /api/admin/plans-config"""
        print("\nüéØ TEST 1: PAGE PRIX ADMIN - /api/admin/plans-config")
        print("-" * 60)
        
        # Test 1.1: Acc√®s avec bonne cl√© admin
        try:
            url = f"{API_BASE}/admin/plans-config"
            params = {"admin_key": CORRECT_ADMIN_KEY}
            
            response = self.session.get(url, params=params)
            
            if response.status_code == 200:
                data = response.json()
                
                # V√©rifier la structure de r√©ponse
                if "success" in data and data["success"]:
                    self.log_test('plans_config', 'Acc√®s avec cl√© admin correcte', True, 
                                f"Status 200, success=true")
                    
                    # V√©rifier la pr√©sence des 3 plans
                    if "plans_config" in data:
                        plans = data["plans_config"]
                        plan_names = [plan.get("plan_name", "") for plan in plans]
                        
                        expected_plans = ["gratuit", "pro", "premium"]
                        found_plans = [name for name in expected_plans if name in plan_names]
                        
                        if len(found_plans) == 3:
                            self.log_test('plans_config', 'Pr√©sence des 3 plans requis', True,
                                        f"Plans trouv√©s: {', '.join(found_plans)}")
                        else:
                            self.log_test('plans_config', 'Pr√©sence des 3 plans requis', False,
                                        f"Plans manquants. Trouv√©s: {', '.join(found_plans)}")
                        
                        # V√©rifier les donn√©es des plans
                        for plan in plans:
                            plan_name = plan.get("plan_name", "unknown")
                            price = plan.get("price", 0)
                            
                            if plan_name == "gratuit" and price == 0:
                                self.log_test('plans_config', f'Plan {plan_name} - prix correct', True,
                                            f"Prix: {price}‚Ç¨")
                            elif plan_name in ["pro", "premium"] and price > 0:
                                self.log_test('plans_config', f'Plan {plan_name} - prix correct', True,
                                            f"Prix: {price}‚Ç¨")
                            else:
                                self.log_test('plans_config', f'Plan {plan_name} - prix incorrect', False,
                                            f"Prix: {price}‚Ç¨")
                    else:
                        self.log_test('plans_config', 'Structure r√©ponse - champ plans_config', False,
                                    "Champ 'plans_config' manquant dans la r√©ponse")
                else:
                    self.log_test('plans_config', 'Structure r√©ponse - success flag', False,
                                f"success={data.get('success', 'missing')}")
            else:
                self.log_test('plans_config', 'Acc√®s avec cl√© admin correcte', False,
                            f"Status {response.status_code}: {response.text[:200]}")
                
        except Exception as e:
            self.log_test('plans_config', 'Acc√®s avec cl√© admin correcte', False,
                        f"Exception: {str(e)}")
        
        # Test 1.2: Acc√®s avec mauvaise cl√© admin (doit retourner 403)
        try:
            url = f"{API_BASE}/admin/plans-config"
            params = {"admin_key": WRONG_ADMIN_KEY}
            
            response = self.session.get(url, params=params)
            
            if response.status_code == 403:
                self.log_test('plans_config', 'S√©curit√© - rejet mauvaise cl√©', True,
                            f"Status 403 comme attendu")
            else:
                self.log_test('plans_config', 'S√©curit√© - rejet mauvaise cl√©', False,
                            f"Status {response.status_code} au lieu de 403")
                
        except Exception as e:
            self.log_test('plans_config', 'S√©curit√© - rejet mauvaise cl√©', False,
                        f"Exception: {str(e)}")
        
        # Test 1.3: Acc√®s sans cl√© admin
        try:
            url = f"{API_BASE}/admin/plans-config"
            
            response = self.session.get(url)
            
            if response.status_code == 403:
                self.log_test('plans_config', 'S√©curit√© - rejet sans cl√©', True,
                            f"Status 403 comme attendu")
            else:
                self.log_test('plans_config', 'S√©curit√© - rejet sans cl√©', False,
                            f"Status {response.status_code} au lieu de 403")
                
        except Exception as e:
            self.log_test('plans_config', 'S√©curit√© - rejet sans cl√©', False,
                        f"Exception: {str(e)}")
    
    def test_promotions_endpoint(self):
        """Test de l'endpoint /api/admin/promotions"""
        print("\nüéØ TEST 2: PAGE PROMOTIONS ADMIN - /api/admin/promotions")
        print("-" * 60)
        
        # Test 2.1: GET - R√©cup√©ration des promotions
        try:
            url = f"{API_BASE}/admin/promotions"
            params = {"admin_key": CORRECT_ADMIN_KEY}
            
            response = self.session.get(url, params=params)
            
            if response.status_code == 200:
                data = response.json()
                
                if "success" in data and data["success"]:
                    self.log_test('promotions', 'GET promotions - acc√®s autoris√©', True,
                                f"Status 200, success=true")
                    
                    # V√©rifier la structure (peut √™tre vide mais doit r√©pondre)
                    if "promotions" in data:
                        promotions = data["promotions"]
                        self.log_test('promotions', 'GET promotions - structure r√©ponse', True,
                                    f"{len(promotions)} promotions trouv√©es")
                    else:
                        self.log_test('promotions', 'GET promotions - structure r√©ponse', False,
                                    "Champ 'promotions' manquant")
                else:
                    self.log_test('promotions', 'GET promotions - success flag', False,
                                f"success={data.get('success', 'missing')}")
            else:
                self.log_test('promotions', 'GET promotions - acc√®s autoris√©', False,
                            f"Status {response.status_code}: {response.text[:200]}")
                
        except Exception as e:
            self.log_test('promotions', 'GET promotions - acc√®s autoris√©', False,
                        f"Exception: {str(e)}")
        
        # Test 2.2: POST - Cr√©ation d'une promotion de test
        try:
            url = f"{API_BASE}/admin/promotions"
            params = {"admin_key": CORRECT_ADMIN_KEY}
            
            test_promotion = {
                "title": "Test Promotion Admin Dashboard",
                "description": "Promotion de test pour validation du tableau de bord",
                "target_plans": ["pro", "premium"],
                "discount_type": "percentage",
                "discount_value": 20.0,
                "badge_text": "TEST -20%",
                "promotional_text": "Offre de test limit√©e",
                "start_date": datetime.now().isoformat(),
                "end_date": datetime(2025, 12, 31).isoformat(),
                "is_active": True
            }
            
            response = self.session.post(url, params=params, json=test_promotion)
            
            if response.status_code in [200, 201]:
                data = response.json()
                
                if "success" in data and data["success"]:
                    self.log_test('promotions', 'POST promotion - cr√©ation r√©ussie', True,
                                f"Status {response.status_code}, promotion cr√©√©e")
                    
                    # Stocker l'ID pour √©ventuel nettoyage
                    if "promotion" in data and "id" in data["promotion"]:
                        self.test_promotion_id = data["promotion"]["id"]
                else:
                    self.log_test('promotions', 'POST promotion - cr√©ation r√©ussie', False,
                                f"success={data.get('success', 'missing')}")
            else:
                self.log_test('promotions', 'POST promotion - cr√©ation r√©ussie', False,
                            f"Status {response.status_code}: {response.text[:200]}")
                
        except Exception as e:
            self.log_test('promotions', 'POST promotion - cr√©ation r√©ussie', False,
                        f"Exception: {str(e)}")
        
        # Test 2.3: S√©curit√© - Acc√®s avec mauvaise cl√©
        try:
            url = f"{API_BASE}/admin/promotions"
            params = {"admin_key": WRONG_ADMIN_KEY}
            
            response = self.session.get(url, params=params)
            
            if response.status_code == 403:
                self.log_test('promotions', 'S√©curit√© - rejet mauvaise cl√©', True,
                            f"Status 403 comme attendu")
            else:
                self.log_test('promotions', 'S√©curit√© - rejet mauvaise cl√©', False,
                            f"Status {response.status_code} au lieu de 403")
                
        except Exception as e:
            self.log_test('promotions', 'S√©curit√© - rejet mauvaise cl√©', False,
                        f"Exception: {str(e)}")
    
    def test_testimonials_endpoint(self):
        """Test de l'endpoint /api/admin/testimonials"""
        print("\nüéØ TEST 3: PAGE T√âMOIGNAGES ADMIN - /api/admin/testimonials")
        print("-" * 60)
        
        # Test 3.1: GET - R√©cup√©ration des t√©moignages
        try:
            url = f"{API_BASE}/admin/testimonials"
            params = {"admin_key": CORRECT_ADMIN_KEY}
            
            response = self.session.get(url, params=params)
            
            if response.status_code == 200:
                data = response.json()
                
                if "success" in data and data["success"]:
                    self.log_test('testimonials', 'GET testimonials - acc√®s autoris√©', True,
                                f"Status 200, success=true")
                    
                    # V√©rifier la structure
                    if "testimonials" in data:
                        testimonials = data["testimonials"]
                        self.log_test('testimonials', 'GET testimonials - structure r√©ponse', True,
                                    f"{len(testimonials)} t√©moignages trouv√©s")
                        
                        # V√©rifier les champs requis sur le premier t√©moignage s'il existe
                        if len(testimonials) > 0:
                            first_testimonial = testimonials[0]
                            required_fields = ["id", "name", "title", "rating", "comment", "status", "created_at"]
                            missing_fields = [field for field in required_fields if field not in first_testimonial]
                            
                            if not missing_fields:
                                self.log_test('testimonials', 'Structure t√©moignage - champs requis', True,
                                            f"Tous les champs requis pr√©sents")
                            else:
                                self.log_test('testimonials', 'Structure t√©moignage - champs requis', False,
                                            f"Champs manquants: {', '.join(missing_fields)}")
                    else:
                        self.log_test('testimonials', 'GET testimonials - structure r√©ponse', False,
                                    "Champ 'testimonials' manquant")
                else:
                    self.log_test('testimonials', 'GET testimonials - success flag', False,
                                f"success={data.get('success', 'missing')}")
            else:
                self.log_test('testimonials', 'GET testimonials - acc√®s autoris√©', False,
                            f"Status {response.status_code}: {response.text[:200]}")
                
        except Exception as e:
            self.log_test('testimonials', 'GET testimonials - acc√®s autoris√©', False,
                        f"Exception: {str(e)}")
        
        # Test 3.2: S√©curit√© - Acc√®s avec mauvaise cl√©
        try:
            url = f"{API_BASE}/admin/testimonials"
            params = {"admin_key": WRONG_ADMIN_KEY}
            
            response = self.session.get(url, params=params)
            
            if response.status_code == 403:
                self.log_test('testimonials', 'S√©curit√© - rejet mauvaise cl√©', True,
                            f"Status 403 comme attendu")
            else:
                self.log_test('testimonials', 'S√©curit√© - rejet mauvaise cl√©', False,
                            f"Status {response.status_code} au lieu de 403")
                
        except Exception as e:
            self.log_test('testimonials', 'S√©curit√© - rejet mauvaise cl√©', False,
                        f"Exception: {str(e)}")
        
        # Test 3.3: Acc√®s sans cl√© admin
        try:
            url = f"{API_BASE}/admin/testimonials"
            
            response = self.session.get(url)
            
            if response.status_code == 403:
                self.log_test('testimonials', 'S√©curit√© - rejet sans cl√©', True,
                            f"Status 403 comme attendu")
            else:
                self.log_test('testimonials', 'S√©curit√© - rejet sans cl√©', False,
                            f"Status {response.status_code} au lieu de 403")
                
        except Exception as e:
            self.log_test('testimonials', 'S√©curit√© - rejet sans cl√©', False,
                        f"Exception: {str(e)}")
    
    def test_timeout_and_fallbacks(self):
        """Test des timeouts et fallbacks pour √©viter les erreurs 502"""
        print("\nüéØ TEST 4: TIMEOUTS ET FALLBACKS - PR√âVENTION ERREURS 502")
        print("-" * 60)
        
        endpoints_to_test = [
            ("plans-config", f"{API_BASE}/admin/plans-config"),
            ("promotions", f"{API_BASE}/admin/promotions"),
            ("testimonials", f"{API_BASE}/admin/testimonials")
        ]
        
        for endpoint_name, url in endpoints_to_test:
            try:
                params = {"admin_key": CORRECT_ADMIN_KEY}
                
                # Test avec timeout court pour v√©rifier la robustesse
                start_time = time.time()
                response = self.session.get(url, params=params, timeout=10)
                response_time = time.time() - start_time
                
                if response.status_code == 200:
                    self.log_test('security', f'Timeout {endpoint_name} - r√©ponse rapide', True,
                                f"R√©ponse en {response_time:.2f}s (< 10s)")
                elif response.status_code == 502:
                    self.log_test('security', f'Timeout {endpoint_name} - √©viter 502', False,
                                f"Erreur 502 d√©tect√©e - fallback n√©cessaire")
                else:
                    self.log_test('security', f'Timeout {endpoint_name} - r√©ponse stable', True,
                                f"Status {response.status_code} (pas de 502)")
                    
            except requests.exceptions.Timeout:
                self.log_test('security', f'Timeout {endpoint_name} - gestion timeout', False,
                            f"Timeout apr√®s 10s - fallback n√©cessaire")
            except Exception as e:
                self.log_test('security', f'Timeout {endpoint_name} - gestion erreur', False,
                            f"Exception: {str(e)}")
    
    def run_all_tests(self):
        """Ex√©cute tous les tests"""
        print("üöÄ D√âMARRAGE DES TESTS ADMIN DASHBOARD")
        print("=" * 80)
        
        start_time = time.time()
        
        # Ex√©cuter tous les tests
        self.test_plans_config_endpoint()
        self.test_promotions_endpoint()
        self.test_testimonials_endpoint()
        self.test_timeout_and_fallbacks()
        
        # Calculer les r√©sultats
        total_time = time.time() - start_time
        
        print("\n" + "=" * 80)
        print("üìä R√âSULTATS FINAUX DES TESTS ADMIN DASHBOARD")
        print("=" * 80)
        
        total_passed = 0
        total_failed = 0
        
        for category, results in self.test_results.items():
            passed = results['passed']
            failed = results['failed']
            total = passed + failed
            
            total_passed += passed
            total_failed += failed
            
            if total > 0:
                success_rate = (passed / total) * 100
                status = "‚úÖ" if success_rate >= 80 else "‚ö†Ô∏è" if success_rate >= 60 else "‚ùå"
                
                print(f"{status} {category.upper()}: {passed}/{total} tests r√©ussis ({success_rate:.1f}%)")
                
                # Afficher les d√©tails des √©checs
                for detail in results['details']:
                    if detail['status'].startswith('‚ùå'):
                        print(f"    ‚ùå {detail['test']}: {detail['details']}")
        
        # R√©sultat global
        total_tests = total_passed + total_failed
        if total_tests > 0:
            global_success_rate = (total_passed / total_tests) * 100
            
            print("\n" + "-" * 80)
            print(f"üéØ R√âSULTAT GLOBAL: {total_passed}/{total_tests} tests r√©ussis ({global_success_rate:.1f}%)")
            print(f"‚è±Ô∏è Temps d'ex√©cution: {total_time:.2f} secondes")
            
            if global_success_rate >= 90:
                print("üéâ EXCELLENT! Tableau de bord admin enti√®rement fonctionnel")
            elif global_success_rate >= 75:
                print("‚úÖ BON! Fonctionnalit√©s principales op√©rationnelles")
            elif global_success_rate >= 50:
                print("‚ö†Ô∏è MOYEN! Corrections partielles, am√©liorations n√©cessaires")
            else:
                print("‚ùå CRITIQUE! Probl√®mes majeurs d√©tect√©s")
        
        print("=" * 80)
        
        return {
            'total_tests': total_tests,
            'passed': total_passed,
            'failed': total_failed,
            'success_rate': global_success_rate if total_tests > 0 else 0,
            'execution_time': total_time,
            'details': self.test_results
        }

def main():
    """Fonction principale"""
    tester = AdminDashboardTester()
    results = tester.run_all_tests()
    
    # Retourner le code de sortie appropri√©
    if results['success_rate'] >= 75:
        sys.exit(0)  # Succ√®s
    else:
        sys.exit(1)  # √âchec

if __name__ == "__main__":
    main()