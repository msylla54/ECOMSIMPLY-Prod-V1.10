#!/usr/bin/env python3
"""
üéØ BACKEND TESTING ECOMSIMPLY - API CLIENT CENTRALIS√â REFACTORING
Test complet du backend ECOMSIMPLY apr√®s refactoring API client centralis√©

OBJECTIFS CRITIQUES:
1. **Endpoints Core**: 
   - GET /api/health (statut syst√®me et MongoDB)
   - GET /api/admin/bootstrap (avec token ECS-Bootstrap-2025-Secure-Token)
   - POST /api/auth/login (msylla54@gmail.com / ECS-Temp#2025-08-22!)

2. **Endpoints Publics**:
   - GET /api/testimonials
   - GET /api/stats/public  
   - GET /api/languages
   - GET /api/public/plans-pricing
   - GET /api/public/affiliate-config

3. **Endpoints Amazon SP-API**:
   - GET /api/amazon/health
   - GET /api/amazon/marketplaces
   - GET /api/amazon/status (avec auth)
   - GET /api/demo/amazon/status (sans auth)

4. **Variables d'environnement**:
   - MONGO_URL fonctionnelle
   - JWT_SECRET configur√©
   - Admin credentials valides

CONTEXTE: S'assurer que le refactoring du client API n'a pas cass√© les fonctionnalit√©s backend existantes.
"""

import asyncio
import aiohttp
import json
import sys
import time
from datetime import datetime
from typing import Dict, List, Any, Optional

# Configuration de test depuis frontend/.env
BASE_URL = "https://ecomsimply-deploy.preview.emergentagent.com"
TEST_TIMEOUT = 30

class EcomsimplyRefactoringTester:
    def __init__(self):
        self.base_url = BASE_URL
        self.session = None
        self.results = {
            "core_endpoints": {},
            "public_endpoints": {},
            "amazon_endpoints": {},
            "authentication": {},
            "environment_validation": {},
            "summary": {
                "total_endpoints": 0,
                "working_endpoints": 0,
                "auth_required_endpoints": 0,
                "broken_endpoints": 0,
                "success_rate": 0.0
            }
        }
        
        # Credentials admin pour test authentification
        self.admin_credentials = {
            "email": "msylla54@gmail.com",
            "password": "ECS-Temp#2025-08-22!"
        }
        
        # Token JWT pour tests authentifi√©s
        self.jwt_token = None
        
    async def __aenter__(self):
        timeout = aiohttp.ClientTimeout(total=TEST_TIMEOUT)
        self.session = aiohttp.ClientSession(timeout=timeout)
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def test_endpoint(self, method: str, endpoint: str, description: str, 
                          expected_status: List[int] = None, data: Dict = None, 
                          headers: Dict = None, use_auth: bool = False) -> Dict[str, Any]:
        """Test un endpoint sp√©cifique"""
        if expected_status is None:
            expected_status = [200, 401, 403, 422]  # Statuts acceptables
            
        url = f"{self.base_url}{endpoint}"
        result = {
            "endpoint": endpoint,
            "method": method,
            "description": description,
            "url": url,
            "status": "unknown",
            "response_code": None,
            "response_time": None,
            "response_data": None,
            "error": None,
            "working": False
        }
        
        try:
            start_time = time.time()
            
            # Pr√©parer les headers
            request_headers = {"Content-Type": "application/json"}
            if headers:
                request_headers.update(headers)
            
            # Ajouter l'authentification si n√©cessaire
            if use_auth and self.jwt_token:
                request_headers["Authorization"] = f"Bearer {self.jwt_token}"
            
            if method.upper() == "GET":
                async with self.session.get(url, headers=request_headers) as response:
                    result["response_code"] = response.status
                    result["response_time"] = round((time.time() - start_time) * 1000, 2)
                    try:
                        result["response_data"] = await response.json()
                    except:
                        result["response_data"] = await response.text()
                    
            elif method.upper() == "POST":
                async with self.session.post(url, json=data or {}, headers=request_headers) as response:
                    result["response_code"] = response.status
                    result["response_time"] = round((time.time() - start_time) * 1000, 2)
                    try:
                        result["response_data"] = await response.json()
                    except:
                        result["response_data"] = await response.text()
                    
            # Analyser le r√©sultat
            if result["response_code"] in expected_status:
                result["working"] = True
                if result["response_code"] == 200:
                    result["status"] = "operational"
                    self.results["summary"]["working_endpoints"] += 1
                elif result["response_code"] in [401, 403]:
                    result["status"] = "auth_required"
                    self.results["summary"]["auth_required_endpoints"] += 1
                elif result["response_code"] == 422:
                    result["status"] = "validation_error"
                    self.results["summary"]["working_endpoints"] += 1
                else:
                    result["status"] = "working"
                    self.results["summary"]["working_endpoints"] += 1
            elif result["response_code"] == 404:
                result["status"] = "not_found"
                result["working"] = False
                self.results["summary"]["broken_endpoints"] += 1
            elif result["response_code"] == 503:
                result["status"] = "service_unavailable"
                result["working"] = True  # Service existe mais indisponible
                self.results["summary"]["working_endpoints"] += 1
            else:
                result["status"] = "error"
                result["working"] = False
                self.results["summary"]["broken_endpoints"] += 1
                
        except asyncio.TimeoutError:
            result["error"] = "Timeout"
            result["status"] = "timeout"
            self.results["summary"]["broken_endpoints"] += 1
        except Exception as e:
            result["error"] = str(e)
            result["status"] = "exception"
            self.results["summary"]["broken_endpoints"] += 1
            
        self.results["summary"]["total_endpoints"] += 1
        return result

    async def test_core_endpoints(self):
        """Test des endpoints core critiques"""
        print("\nüîß VALIDATION ENDPOINTS CORE")
        print("=" * 50)
        
        # 1. Health endpoint avec validation MongoDB
        health_result = await self.test_endpoint(
            "GET", "/api/health", "System Health Check & MongoDB Status"
        )
        self.results["core_endpoints"]["health"] = health_result
        
        status_icon = "‚úÖ" if health_result["working"] else "‚ùå"
        print(f"{status_icon} Health Check: {health_result['status']} ({health_result['response_code']})")
        if health_result["response_time"]:
            print(f"    Response time: {health_result['response_time']}ms")
        
        # Analyser la r√©ponse health pour MongoDB
        if health_result["response_code"] == 200 and health_result.get("response_data"):
            health_data = health_result["response_data"]
            if isinstance(health_data, dict):
                db_status = health_data.get("database", {}).get("status") or health_data.get("services", {}).get("database")
                if db_status == "healthy":
                    print(f"    ‚úÖ MongoDB Status: {db_status}")
                else:
                    print(f"    ‚ö†Ô∏è MongoDB Status: {db_status}")
        
        # 2. Admin Bootstrap avec token
        bootstrap_result = await self.test_endpoint(
            "POST", 
            "/api/admin/bootstrap", 
            "Admin Bootstrap Process",
            [200, 403], 
            None, 
            {"x-bootstrap-token": "ECS-Bootstrap-2025-Secure-Token"}
        )
        self.results["core_endpoints"]["bootstrap"] = bootstrap_result
        
        status_icon = "‚úÖ" if bootstrap_result["working"] else "‚ùå"
        print(f"{status_icon} Admin Bootstrap: {bootstrap_result['status']} ({bootstrap_result['response_code']})")
        
        # 3. Admin Login pour obtenir JWT token
        await self.test_admin_authentication()

    async def test_admin_authentication(self):
        """Test du syst√®me d'authentification admin"""
        print("\nüîê VALIDATION AUTHENTIFICATION ADMIN")
        print("=" * 50)
        
        # Test login admin
        login_result = await self.test_endpoint(
            "POST", 
            "/api/auth/login", 
            "Admin Authentication",
            [200, 400, 401, 500],
            self.admin_credentials
        )
        
        self.results["authentication"]["admin_login"] = login_result
        
        status_icon = "‚úÖ" if login_result["working"] else "‚ùå"
        print(f"{status_icon} Admin Login: {login_result['status']} ({login_result['response_code']})")
        
        # Analyser la r√©ponse pour extraire le token JWT
        if login_result["response_code"] == 200:
            response_data = login_result.get("response_data", {})
            if isinstance(response_data, dict):
                token = response_data.get("token") or response_data.get("access_token")
                user_data = response_data.get("user", {})
                is_admin = user_data.get("is_admin", False)
                
                if token:
                    self.jwt_token = token
                    print(f"    ‚úÖ JWT Token generated: {len(token)} chars")
                    print(f"    ‚úÖ Admin privileges: {is_admin}")
                    print(f"    ‚úÖ User email: {user_data.get('email', 'N/A')}")
                else:
                    print(f"    ‚ùå PROBL√àME: Pas de token JWT g√©n√©r√©")
            else:
                print(f"    ‚ùå PROBL√àME: R√©ponse invalide - {response_data}")
        else:
            print(f"    ‚ùå PROBL√àME: Login √©chou√© - {login_result.get('response_data', 'No data')}")

    async def test_public_endpoints(self):
        """Test des endpoints publics"""
        print("\nüåê VALIDATION ENDPOINTS PUBLICS")
        print("=" * 50)
        
        public_endpoints = [
            ("GET", "/api/testimonials", "Customer Testimonials"),
            ("GET", "/api/stats/public", "Public Statistics"),
            ("GET", "/api/languages", "Supported Languages"),
            ("GET", "/api/public/plans-pricing", "Plans & Pricing"),
            ("GET", "/api/public/affiliate-config", "Affiliate Configuration"),
        ]
        
        for method, endpoint, description in public_endpoints:
            result = await self.test_endpoint(method, endpoint, description)
            self.results["public_endpoints"][endpoint] = result
            
            status_icon = "‚úÖ" if result["working"] else "‚ùå"
            print(f"{status_icon} {description}: {result['status']} ({result['response_code']})")
            if result["response_time"]:
                print(f"    Response time: {result['response_time']}ms")
            
            # Analyser les r√©ponses sp√©cifiques
            if result["response_code"] == 200 and result.get("response_data"):
                self.analyze_public_endpoint_response(endpoint, result["response_data"])

    def analyze_public_endpoint_response(self, endpoint: str, data: Any):
        """Analyse les r√©ponses des endpoints publics"""
        if endpoint == "/api/testimonials":
            if isinstance(data, list):
                print(f"    üìä Testimonials count: {len(data)}")
            elif isinstance(data, dict) and "testimonials" in data:
                print(f"    üìä Testimonials count: {len(data['testimonials'])}")
        
        elif endpoint == "/api/stats/public":
            if isinstance(data, dict):
                clients = data.get("satisfied_clients", "N/A")
                rating = data.get("average_rating", "N/A")
                print(f"    üìä Satisfied clients: {clients}, Rating: {rating}")
        
        elif endpoint == "/api/languages":
            if isinstance(data, list):
                print(f"    üåç Languages supported: {len(data)}")
            elif isinstance(data, dict):
                langs = data.get("languages", [])
                print(f"    üåç Languages supported: {len(langs)}")
        
        elif endpoint == "/api/public/plans-pricing":
            if isinstance(data, dict):
                plans = data.get("plans", [])
                promotions = data.get("active_promotions_count", 0)
                print(f"    üí∞ Plans available: {len(plans)}, Promotions: {promotions}")
        
        elif endpoint == "/api/public/affiliate-config":
            if isinstance(data, dict):
                enabled = data.get("program_enabled", False)
                pro_rate = data.get("default_commission_rate_pro", "N/A")
                premium_rate = data.get("default_commission_rate_premium", "N/A")
                print(f"    ü§ù Program enabled: {enabled}, Rates: Pro {pro_rate}%, Premium {premium_rate}%")

    async def test_amazon_endpoints(self):
        """Test des endpoints Amazon SP-API"""
        print("\nüöÄ VALIDATION ENDPOINTS AMAZON SP-API")
        print("=" * 50)
        
        # Endpoints Amazon sans authentification
        amazon_public_endpoints = [
            ("GET", "/api/amazon/health", "Amazon Health Check"),
            ("GET", "/api/amazon/marketplaces", "Amazon Marketplaces"),
            ("GET", "/api/demo/amazon/status", "Demo Amazon Status"),
        ]
        
        for method, endpoint, description in amazon_public_endpoints:
            result = await self.test_endpoint(method, endpoint, description)
            self.results["amazon_endpoints"][endpoint] = result
            
            status_icon = "‚úÖ" if result["working"] else "‚ùå"
            print(f"{status_icon} {description}: {result['status']} ({result['response_code']})")
            if result["response_time"]:
                print(f"    Response time: {result['response_time']}ms")
            
            # Analyser les r√©ponses Amazon
            if result["response_code"] == 200 and result.get("response_data"):
                self.analyze_amazon_endpoint_response(endpoint, result["response_data"])
        
        # Endpoints Amazon avec authentification
        if self.jwt_token:
            print("\nüîê Testing Amazon endpoints with authentication...")
            
            amazon_auth_endpoints = [
                ("GET", "/api/amazon/status", "Amazon Connection Status (Auth)"),
            ]
            
            for method, endpoint, description in amazon_auth_endpoints:
                result = await self.test_endpoint(method, endpoint, description, use_auth=True)
                self.results["amazon_endpoints"][f"{endpoint}_auth"] = result
                
                status_icon = "‚úÖ" if result["working"] else "‚ùå"
                print(f"{status_icon} {description}: {result['status']} ({result['response_code']})")
        else:
            print("    ‚ö†Ô∏è No JWT token available for authenticated Amazon endpoints")

    def analyze_amazon_endpoint_response(self, endpoint: str, data: Any):
        """Analyse les r√©ponses des endpoints Amazon"""
        if endpoint == "/api/amazon/health":
            if isinstance(data, dict):
                status = data.get("status", "unknown")
                service_status = data.get("service_status", "unknown")
                print(f"    üè• Amazon Health: {status}, Service: {service_status}")
        
        elif endpoint == "/api/amazon/marketplaces":
            if isinstance(data, list):
                print(f"    üõí Marketplaces available: {len(data)}")
                if len(data) > 0:
                    # Afficher quelques marketplaces
                    sample_markets = [m.get("name", "Unknown") for m in data[:3] if isinstance(m, dict)]
                    print(f"    üìç Sample markets: {', '.join(sample_markets)}")
        
        elif endpoint == "/api/demo/amazon/status":
            if isinstance(data, dict):
                demo_status = data.get("status", "unknown")
                print(f"    üé≠ Demo Status: {demo_status}")

    async def validate_environment_variables(self):
        """Validation des variables d'environnement critiques"""
        print("\nüîß VALIDATION VARIABLES D'ENVIRONNEMENT")
        print("=" * 50)
        
        env_checks = {
            "mongo_url": False,
            "jwt_secret": False,
            "admin_credentials": False
        }
        
        # 1. MONGO_URL - Test√© indirectement via health endpoint
        health_result = self.results.get("core_endpoints", {}).get("health", {})
        if health_result.get("working") and health_result.get("response_data"):
            health_data = health_result["response_data"]
            if isinstance(health_data, dict):
                db_status = health_data.get("database", {}).get("status") or health_data.get("services", {}).get("database")
                if db_status == "healthy":
                    env_checks["mongo_url"] = True
                    print("‚úÖ MONGO_URL: Fonctionnelle (MongoDB connect√©)")
                else:
                    print(f"‚ùå MONGO_URL: Probl√®me d√©tect√© (status: {db_status})")
        else:
            print("‚ùå MONGO_URL: Impossible de v√©rifier (health endpoint failed)")
        
        # 2. JWT_SECRET - Test√© indirectement via login
        login_result = self.results.get("authentication", {}).get("admin_login", {})
        if login_result.get("working") and self.jwt_token:
            env_checks["jwt_secret"] = True
            print("‚úÖ JWT_SECRET: Configur√© (token g√©n√©r√© avec succ√®s)")
        else:
            print("‚ùå JWT_SECRET: Probl√®me d√©tect√© (pas de token g√©n√©r√©)")
        
        # 3. Admin credentials - Test√© via login
        if login_result.get("working"):
            env_checks["admin_credentials"] = True
            print("‚úÖ Admin Credentials: Valides (login r√©ussi)")
        else:
            print("‚ùå Admin Credentials: Invalides (login √©chou√©)")
        
        self.results["environment_validation"] = env_checks
        
        # R√©sum√© validation environnement
        valid_count = sum(env_checks.values())
        total_count = len(env_checks)
        print(f"\nüìä Variables d'environnement: {valid_count}/{total_count} valides")

    def generate_final_report(self) -> str:
        """G√©n√®re le rapport final de validation"""
        report = []
        report.append("üéØ BACKEND TESTING ECOMSIMPLY - API CLIENT CENTRALIS√â REFACTORING")
        report.append("=" * 70)
        
        # Calculer le taux de succ√®s global
        total = self.results["summary"]["total_endpoints"]
        working = self.results["summary"]["working_endpoints"] + self.results["summary"]["auth_required_endpoints"]
        success_rate = (working / total) * 100 if total > 0 else 0
        self.results["summary"]["success_rate"] = success_rate
        
        report.append(f"\nüìä R√âSULTATS GLOBAUX:")
        report.append(f"   ‚Ä¢ Total Endpoints Test√©s: {total}")
        report.append(f"   ‚Ä¢ Endpoints Fonctionnels: {self.results['summary']['working_endpoints']}")
        report.append(f"   ‚Ä¢ Auth Requise (Normal): {self.results['summary']['auth_required_endpoints']}")
        report.append(f"   ‚Ä¢ Endpoints Cass√©s: {self.results['summary']['broken_endpoints']}")
        report.append(f"   ‚Ä¢ Taux de Succ√®s Global: {success_rate:.1f}%")
        
        # Analyse par cat√©gorie
        categories = [
            ("core_endpoints", "üîß ENDPOINTS CORE", ["health", "bootstrap"]),
            ("public_endpoints", "üåê ENDPOINTS PUBLICS", ["/api/testimonials", "/api/stats/public", "/api/languages", "/api/public/plans-pricing", "/api/public/affiliate-config"]),
            ("amazon_endpoints", "üöÄ ENDPOINTS AMAZON SP-API", ["/api/amazon/health", "/api/amazon/marketplaces", "/api/demo/amazon/status"])
        ]
        
        for category_key, category_name, expected_endpoints in categories:
            category_results = self.results.get(category_key, {})
            if category_results:
                working_count = sum(1 for r in category_results.values() if r.get("working", False))
                total_count = len(category_results)
                category_rate = (working_count / total_count) * 100 if total_count > 0 else 0
                
                status_icon = "‚úÖ" if category_rate >= 90 else "‚ö†Ô∏è" if category_rate >= 75 else "‚ùå"
                report.append(f"\n{category_name}:")
                report.append(f"   {status_icon} Taux de succ√®s: {category_rate:.1f}% ({working_count}/{total_count})")
                
                # D√©tail des endpoints probl√©matiques
                for endpoint, result in category_results.items():
                    if not result.get("working", False):
                        report.append(f"   ‚ùå {endpoint}: {result.get('status', 'unknown')} ({result.get('response_code', 'N/A')})")
        
        # Analyse authentification
        report.append(f"\nüîê AUTHENTIFICATION:")
        auth_results = self.results.get("authentication", {})
        admin_login = auth_results.get("admin_login", {})
        if admin_login.get("working") and self.jwt_token:
            report.append(f"   ‚úÖ Admin Login: FONCTIONNEL")
            report.append(f"   ‚úÖ JWT Token Generation: FONCTIONNEL")
        else:
            report.append(f"   ‚ùå Admin Login: √âCHEC - {admin_login.get('status', 'unknown')}")
        
        # Analyse variables d'environnement
        report.append(f"\nüîß VARIABLES D'ENVIRONNEMENT:")
        env_validation = self.results.get("environment_validation", {})
        for var_name, is_valid in env_validation.items():
            status_icon = "‚úÖ" if is_valid else "‚ùå"
            var_display = var_name.replace("_", " ").upper()
            report.append(f"   {status_icon} {var_display}: {'VALIDE' if is_valid else 'PROBL√àME'}")
        
        # Diagnostic final
        report.append(f"\nüéØ DIAGNOSTIC FINAL:")
        if success_rate >= 95:
            report.append("   üéâ EXCELLENT - Refactoring API client r√©ussi, aucun impact d√©tect√©")
        elif success_rate >= 85:
            report.append("   ‚úÖ TR√àS BON - Refactoring r√©ussi avec impact minimal")
        elif success_rate >= 75:
            report.append("   ‚ö†Ô∏è BON - Quelques probl√®mes mineurs √† corriger")
        elif success_rate >= 60:
            report.append("   ‚ö†Ô∏è MOYEN - Corrections n√©cessaires apr√®s refactoring")
        else:
            report.append("   ‚ùå CRITIQUE - Refactoring a caus√© des r√©gressions majeures")
        
        # Recommandations sp√©cifiques
        report.append(f"\nüí° RECOMMANDATIONS:")
        
        if self.results["summary"]["broken_endpoints"] > 0:
            report.append(f"   üîß Corriger {self.results['summary']['broken_endpoints']} endpoints cass√©s")
        
        # Recommandations par cat√©gorie
        if not self.results.get("authentication", {}).get("admin_login", {}).get("working", False):
            report.append("   üîê PRIORIT√â HAUTE: Corriger l'authentification admin")
        
        env_issues = sum(1 for v in self.results.get("environment_validation", {}).values() if not v)
        if env_issues > 0:
            report.append(f"   üîß V√©rifier {env_issues} variables d'environnement")
        
        if success_rate >= 90:
            report.append("   ‚úÖ Le refactoring API client n'a pas impact√© les fonctionnalit√©s backend")
        else:
            report.append("   ‚ö†Ô∏è Le refactoring API client peut avoir caus√© des r√©gressions")
        
        return "\n".join(report)

    async def run_complete_validation(self):
        """Ex√©cute la validation compl√®te selon les sp√©cifications"""
        print("üéØ BACKEND TESTING ECOMSIMPLY - API CLIENT CENTRALIS√â REFACTORING")
        print("=" * 70)
        print(f"Target: {self.base_url}")
        print(f"Timestamp: {datetime.now().isoformat()}")
        
        try:
            # 1. Validation Endpoints Core
            await self.test_core_endpoints()
            
            # 2. Validation Endpoints Publics
            await self.test_public_endpoints()
            
            # 3. Validation Endpoints Amazon SP-API
            await self.test_amazon_endpoints()
            
            # 4. Validation Variables d'Environnement
            await self.validate_environment_variables()
            
            # 5. G√©n√©ration du rapport final
            print("\n" + "=" * 70)
            print(self.generate_final_report())
            
            return self.results
            
        except Exception as e:
            print(f"‚ùå ERREUR CRITIQUE pendant la validation: {str(e)}")
            return {"error": str(e), "results": self.results}

async def main():
    """Point d'entr√©e principal"""
    print("üéØ BACKEND TESTING ECOMSIMPLY - API CLIENT CENTRALIS√â REFACTORING")
    print("Test complet du backend apr√®s refactoring pour v√©rifier l'absence de r√©gressions")
    print()
    
    async with EcomsimplyRefactoringTester() as tester:
        results = await tester.run_complete_validation()
        
        # D√©terminer le code de sortie
        if "error" in results:
            sys.exit(1)
        
        success_rate = results.get("summary", {}).get("success_rate", 0)
        
        if success_rate >= 95:
            print(f"\nüéâ EXCELLENT: Backend √† {success_rate:.1f}% fonctionnel - Refactoring r√©ussi!")
            sys.exit(0)
        elif success_rate >= 85:
            print(f"\n‚úÖ TR√àS BON: Backend √† {success_rate:.1f}% fonctionnel - Impact minimal du refactoring")
            sys.exit(0)
        elif success_rate >= 75:
            print(f"\n‚ö†Ô∏è BON: Backend √† {success_rate:.1f}% fonctionnel - Quelques corrections n√©cessaires")
            sys.exit(0)
        elif success_rate >= 60:
            print(f"\n‚ö†Ô∏è MOYEN: Backend √† {success_rate:.1f}% fonctionnel - Corrections n√©cessaires")
            sys.exit(0)
        else:
            print(f"\n‚ùå CRITIQUE: Backend √† {success_rate:.1f}% fonctionnel - R√©gressions majeures d√©tect√©es")
            sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())